<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Proactive.Virtualization.Reports</ID>
      <Version>1.0.2.4</Version>
    </Identity>
    <Name>Proactive Virtualization Reports</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSIL">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>      
	  <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
   <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Proactive.Virtualization.ESX.Admin.Reports.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:06</Start>
                        <End>10:26</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                 <ScriptName>Proactive.Virtualization.ESX.Admin.Reports.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware alerts
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.ESX.Admin.Reports.Datasource.v1024.ps1"
$EventID = "598"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather VMware Alerts for date ($date).")

$DSMessage = "Proactive DailyTasks Virtualization Team alerts for date ($date)."



# Gather ADDS alerts
# Monitors then rules
# Virtualization Team report alerts

# Cluster alerts
# Virtualization Team report alerts
$Cluster = get-scomalert -name  "VMware: Cluster*" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc
	#| select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

$DataCenter = get-scomalert -name  "VMware: Datacenter*" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc 
	#| select TimeRaised,Parameters -auto -wrap

$Datastore = get-scomalert -name "VMware: Datastore*" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc 
	# | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

$VMHost = get-scomalert -name  "VMware: Host*" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc 
	# | select TimeRaised,Parameters -auto -wrap

$ResourcePool = get-scomalert -name  "VMware: Resource Pool*" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc 
	# | select TimeRaised,Parameters -auto -wrap

$NetworkLink = get-scomalert -name  "Host System Network Adapter Link Is Not Connected" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc

# Hot running cluster - Memory Pressure break out
$MemoryPressure = $Cluster | ? { $_.Name -eq "VMware: Cluster Effective Memory Pressure is high" }
	# | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

# VM waiting for CPU - CPU Ready time
$CPUReadyTime = get-scomalert -name "VMware: VirtualMachine Virtual CPU Ready Time (%) is high" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc 
	#|ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

# VM Storage availability
$StorageAborted = $VMhost | ? { $_.Name -eq "VMware: Host Storage Aborted Commands is High" } | sort -property MonitoringObjectDisplayName 
	#| select TimeRaised,Description -auto -wrap

# Need VM memory performance alerts
$VirtualMachineBalloon = get-scomalert -name "VMware: Virtual Machine Balloon Memory is High" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc
	#|ft TimeRaised,Parameters -auto -wrap

# Host read/writes or shared memory high
$HostWrite = $VMhost | ? { $_.Name -eq "VMware: Host Storage Write Data Rate is High" } 
	#| ? { ( $_.TimeRaised -ge $Time ) } | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap
$HostRead = $VMhost | ? { $_.Name -eq "VMware: Host Storage Read Data Rate is High" }
	#| ? { ( $_.TimeRaised -ge $Time ) } | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap
$HostSharedMemory = $Vmhost | ? { $_.Name -eq "VMware: Host System Shared Memory is High" }
	#| select TimeRaised,Parameters  -auto -wrap

# Host hardware alerts
$HostMemoryFault = get-scomalert -name "NiCE VMware vSphere Host Memory Sensor Group Monitor" | ? { ( $_.TimeRaised -ge $Time ) }
	#|ft TimeRaised,Parameters -auto -wrap
$HostPowerFault = get-scomalert -name "VMware: Fault detected in Host Power Sensor Group"
	# |ft TimeRaised,Parameters -auto -wrap


# Resource Pool
$ResourcePoolMemory = $ResourcePool | ? { $_.Name -eq "VMware: Resource Pool Overhead Memory is High" }
	# | ? { ( $_.TimeRaised -ge $Time ) } | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

# Host maintenance alerts
$HostMaintenance = $VMHost | ? { $_.Name -eq "VMware: Host is in Maintenance Mode" }

  
# Tally up all the VMware alerts since last report
$VMwareAlerts = $Cluster + $DataCenter + $Datastore + $VMHost + $ResourcePool + $MemoryPressure + $CPUReadyTime `
	+ $StorageAborted + $VirtualMachineBalloon + $HostWrite + $HostRead + $HostSharedMemory + $HostMemoryFault `
	+ $HostPowerFault + $ResourcePoolMemory + $HostMaintenance + $NetworkLink

$VMwareAlerts.Count




# Open ESX VMware server alerts
$OpenVMwareAdminAlerts = $VMwareAlerts	| ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMwareAdminAlerts.Count

$OpenClusterAlerts = $Cluster | ? { ( $_.ResolutionState -ne "255" ) }
$OpenDataCenterAlerts = $DataCenter | ? { ( $_.ResolutionState -ne "255" ) }
$OpenDatastoreAlerts = $Datastore | ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMHostAlerts = $VMHost | ? { ( $_.ResolutionState -ne "255" ) }
$OpenRPoolAlerts = $ResourcePool | ? { ( $_.ResolutionState -ne "255" ) }
$OpenNetworkLink = $NetworkLink | ? { ( $_.ResolutionState -ne "255" ) }
$OpenMemoryPressureAlerts = $MemoryPressure | ? { ( $_.ResolutionState -ne "255" ) }
$OpenCPUReadyTimeAlerts = $CPUReadyTime | ? { ( $_.ResolutionState -ne "255" ) }
$OpenStorageAbortedAlerts = 	$StorageAborted | ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMBalloonAlerts = $VirtualMachineBalloon | ? { ( $_.ResolutionState -ne "255" ) }	
$OpenHostWriteAlerts = $HostWrite | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHostReadAlerts = $HostRead | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHostSharedAlerts = $HostSharedMemory | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHostMemoryAlerts = $HostMemoryFault | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHostPowerAlerts = $HostPowerFault | ? { ( $_.ResolutionState -ne "255" ) }
$OpenRPMemoryAlerts = $ResourcePoolMemory | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHMAlerts = $HostMaintenance | ? { ( $_.ResolutionState -ne "255" ) }

# Closed VMware server alerts
$ClosedESXAdminAlerts = $VMwareAlerts | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedESXAdminAlerts.Count

$ClosedClusterAlerts = $Cluster | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedDataCenterAlerts = $DataCenter | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedDatastoreAlerts = $Datastore | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedVMHostAlerts = $VMHost | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedRPoolAlerts = $ResourcePool | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedNetworkLink = $NetworkLink | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedMemoryPressureAlerts = $MemoryPressure | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedCPUReadyTimeAlerts = $CPUReadyTime | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedStorageAbortedAlerts = 	$StorageAborted | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedVMBalloonAlerts = $VirtualMachineBalloon | ? { ( $_.ResolutionState -eq "255" ) }	
$ClosedHostWriteAlerts = $HostWrite | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHostReadAlerts = $HostRead | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHostSharedAlerts = $HostSharedMemory | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHostMemoryAlerts = $HostMemoryFault | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHostPowerAlerts = $HostPowerFault | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedRPMemoryAlerts = $ResourcePoolMemory | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHMAlerts = $HostMaintenance | ? { ( $_.ResolutionState -eq "255" ) }




# Build report
$VMwareTeamReport = @()


# Check for alerts 
if ( $VMwareAlerts.Count -eq 0 )
	{
	$Message = "ZERO alerts for VMware Team Daily report for ($date)"
	$VMwareTeamReport += "ZERO alerts for VMware Team Daily report for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $VMwareAlerts.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show VMware alerts by Time Raised,NetBiosComputerName,Message
	#
	$VMwareTeamReport += $DSMessage
	$VMwareTeamReport += ""
	$VMwareTeamReport += "# VMware Team Daily report for $($date)"
	$VMwareTeamReport += "#"
	$VMwareTeamReport += "# Alerts since last run = $($VMwareAlerts.Count)"
	$VMwareTeamReport += "#"
	$VMwareTeamReport += "# Total OPEN alerts"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VMware Team alerts = $($OpenVMwareAdminAlerts.Count)"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# Cluster alerts = $($OpenClusterAlerts.Count)"
	$VMwareTeamReport += "# CPU Ready wait time alerts = $($OpenCPUReadyTimeAlerts.Count)"
	$VMwareTeamReport += "# DataCenter alerts = $($OpenDataCenterAlerts.Count)"
	$VMwareTeamReport += "# Datastore alerts = $($OpenDatastoreAlerts.Count)"
	$VMwareTeamReport += "# Memory Pressure cluster alerts = $($OpenMemoryPressureAlerts.Count)"
 	$VMwareTeamReport += "# Network link down alerts =  $($OpenNetworkLink.Count)"
 	$VMwareTeamReport += "# Resource Pool alerts = $($OpenRPoolAlerts.Count)"
 	$VMwareTeamReport += "# Resource Pool Memory alerts = $($OpenRPMemoryAlerts.Count)"
 	$VMwareTeamReport += "# Storage Aborted failure alerts = $($OpenStorageAbortedAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
 	$VMwareTeamReport += "# Host alerts = $($VMHost.Count)"
	$VMwareTeamReport += "#========================================================"
 	$VMwareTeamReport += "# Balloon memory stolen by host = $($OpenVMBalloonAlerts.Count)"
 	$VMwareTeamReport += "# Memory hardware alerts = $($OpenHostMemoryAlerts.Count)"
 	$VMwareTeamReport += "# Power hardware alerts = $($OpenHostPowerAlerts.Count)"
 	$VMwareTeamReport += "# Shared memory alerts = $($OpenHostSharedAlerts.Count)"
 	$VMwareTeamReport += "# Storage read alerts = $($OpenHostReadAlerts.Count)"
 	$VMwareTeamReport += "# Storage write alerts = $($OpenHostWriteAlerts.Count)"
	$VMwareTeamReport += ""
 	$VMwareTeamReport += "# Maintenance mode alerts = $($OpenHMAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""

	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "# CLOSED alerts"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VMware Team alerts = $($ClosedVMwareAdminAlerts.Count)"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# Cluster alerts = $($ClosedClusterAlerts.Count)"
	$VMwareTeamReport += "# CPU Ready wait time alerts = $($ClosedCPUReadyTimeAlerts.Count)"
	$VMwareTeamReport += "# DataCenter alerts = $($ClosedDataCenterAlerts.Count)"
	$VMwareTeamReport += "# Datastore alerts = $($ClosedDatastoreAlerts.Count)"
	$VMwareTeamReport += "# Memory Pressure cluster alerts = $($ClosedMemoryPressureAlerts.Count)"
 	$VMwareTeamReport += "# Network link down alerts =  $($ClosedNetworkLink.Count)"
 	$VMwareTeamReport += "# Resource Pool alerts = $($ClosedRPoolAlerts.Count)"
 	$VMwareTeamReport += "# Resource Pool Memory alerts = $($ClosedRPMemoryAlerts.Count)"
 	$VMwareTeamReport += "# Storage Aborted failure alerts = $($ClosednStorageAbortedAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
 	$VMwareTeamReport += "# Balloon memory stolen by host = $($ClosedVMBalloonAlerts.Count)"
 	$VMwareTeamReport += "# Memory hardware alerts = $($ClosedHostMemoryAlerts.Count)"
 	$VMwareTeamReport += "# Power hardware alerts = $($ClosedHostPowerAlerts.Count)"
 	$VMwareTeamReport += "# Shared memory alerts = $($ClosedHostSharedAlerts.Count)"
 	$VMwareTeamReport += "# Storage read alerts = $($ClosedHostReadAlerts.Count)"
 	$VMwareTeamReport += "# Storage write alerts = $($ClosedHostWriteAlerts.Count)"
	$VMwareTeamReport += ""
 	$VMwareTeamReport += "# Maintenance mode alerts = $($ClosedHMAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""
	$VMwareTeamReport += ""



	if ( $OpenClusterAlerts.count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware cluster issues for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenClusterAlerts.count -gt 0 )
		{
		$VMwareTeamReport += "# VMware cluster alert detail"
		$VMwareTeamReport += "#============================================="
		$VMwareTeamReport += $OpenClusterAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#========================"
		$VMwareTeamReport += ""
		}


	if ( $OpenDataCenterAlerts.count -eq 0 )
		{
		$VMwareTeamReport += "ZERO Open DataCenter Alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenDataCenterAlerts.count -gt 0 )
		{
		$VMwareTeamReport += "# VMware DataCenter alert detail"
		$VMwareTeamReport += "#============================================="
		$VMwareTeamReport += $OpenDataCenterAlerts | select TimeRaised,Parameters | out-string
		$VMwareTeamReport += "#========================"
		$VMwareTeamReport += ""
		}
	
		
 	if ( $OpenDatastoreAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Datastore alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenDatastoreAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Datastore availability and write delay detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenDatastoreAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenResourcePoolAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware ResourcePool alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenResourcePoolAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware ResourcePool alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenResourcePoolAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenNetworkLink.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Network link adapter down alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenResourcePoolAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Network link adapter down alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenNetworkLink | sort -property MonitoringObjectDisplayName | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += ""
		}


 	if ( $OpenMemoryPressureAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Cluster Memory Pressure alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenMemoryPressureAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Cluster Memory Pressure alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenMemoryPressureAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		
		
 	if ( $OpenVMBalloonAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Balloon memory stolen by host alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenVMBalloonAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Balloon memory stolen by host alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenVMBalloonAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenCPUReadyTimeAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host CPU Ready wait time alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenCPUReadyTimeAlerts.Count -gt 0 )
		{
		($OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq).Count
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host CPU Ready wait time alert detail"
		$VMwareTeamReport += "#=============================="
		#$VMwareTeamReport += ($OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq).Count
		#$OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		#$VMwareTeamReport += "#============================================================"
		#$VMwareTeamReport += ""
		}
		

 	if ( $OpenStorageAbortedAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Storage Aborted Host alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenStorageAbortedAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Storage Aborted Host alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += "Multiple Hosts with 150+ SCSI storage errors in an hour"
		$VMwareTeamReport += $OpenStorageAbortedAlerts | ft TimeRaised,MonitoringObjectDisplayName -auto -wrap | out-string
		#$VMwareTeamReport += $OpenStorageAbortedAlerts | ft TimeRaised,Description -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		

 	if ( $OpenHostWriteAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Storage Write Data Rate alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostWriteAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Storage Write Data Rate alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostWriteAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenHostReadAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Storage Read Data Rate alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostReadAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Storage Read Data Rate alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostReadAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenHostSharedAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host System Shared Memory alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostSharedAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host System Shared Memory alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostSharedAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		

 	if ( $OpenHostMemoryAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Memory hardware alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostMemoryAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Memory hardware alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostMemoryAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenHostPowerAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Power fault alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostPowerAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Power faults alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostPowerAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		

 	if ( $OpenRPMemoryAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host CPU Ready wait time alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenRPMemoryAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host CPU Ready wait time alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenRPMemoryAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenVMHostAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host remaining alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenVMHostAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host remaining alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenVMHostAlerts | ? { ( $_.Name -eq "Host Virtual CPU Ready Time*" ) `
		-AND ( $_.Name -eq "VMware: Host Storage Aborted Commands is High" ) `
		-AND ( $_.Name -eq "VMware: Host Storage Write Data Rate is High" ) `
		-AND ( $_.Name -eq "VMware: Host Storage Read Data Rate is High" ) `
		-AND ( $_.Name -ne "VMware: Host System Shared Memory is High" ) `
		} | ft TimeRaised,Name,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}

		
 	if ( $OpenHMAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host maintenance mode alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHMAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host maintenance mode alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHMAlerts | select TimeRaised,MonitoringObjectDisplayName | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}

	$VMwareTeamReport += ""
	$VMwareTeamReport += ""
	}

$VMwareTeamReport


$VMwareTeamReport = $VMwareTeamReport | out-string

#============================================================

  $Result = "GOOD"
  $Message = "Proactive DailyTasks Virtualization Team alerts for date ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"$VMwareTeamReport")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$VMwareTeamReport)

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.Virtualization.ESX.NonWindows.Report.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:06</Start>
                        <End>10:26</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                 <ScriptName>Proactive.Virtualization.ESX.NonWindows.Report.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware alerts
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.ESX.NonWindows.Report.Datasource.v1024.ps1"
$EventID = "598"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather VMware Non-Windows Alerts for date ($date).")

$DSMessage = "Proactive DailyTasks Non-Windows alerts for date ($date)."



# Gather ADDS alerts
# Monitors then rules
# Virtualization Team report alerts
#
# Non-Windows alerts
$NonWindows = get-scomalert -name "VMware: Virtual Machine Overall Guest Disk Usage High" 
# | ft TimeRaised,MonitoringObjectDisplayName |more

$VMwareTools = get-scomalert -name "VMware: Virtual Machine VMware Tools is Not Running"
# | ft TimeRaised,MonitoringObjectDisplayName |more

# VM waiting for CPU - CPU Ready time
$CPUReadyTime = get-scomalert -name "VMware: VirtualMachine Virtual CPU Ready Time (%) is high" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc 
	#|ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

# Need VM memory performance alerts
$VirtualMachineBalloon = get-scomalert -name "VMware: Virtual Machine Balloon Memory is High" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc
	#|ft TimeRaised,Parameters -auto -wrap

# Host maintenance alerts
$HostMaintenance = $VMHost | ? { $_.Name -eq "VMware: Host is in Maintenance Mode" }

  
# Tally up all the VMware alerts since last report
$VMwareAlerts = $NonWindows + $VMwareTools + $CPUReadyTime + $VirtualMachineBalloon + $HostMaintenance
$VMwareAlerts.Count




# Open ESX VMware server alerts
$OpenVMwareAdminAlerts = $VMwareAlerts	| ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMwareAdminAlerts.Count

$OpenNonWindows = $NonWindows | ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMwareTools = $VMwareTools | ? { ( $_.ResolutionState -ne "255" ) }
$OpenCPUReadyTimeAlerts = $CPUReadyTime | ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMBalloonAlerts = $VirtualMachineBalloon | ? { ( $_.ResolutionState -ne "255" ) }	
$OpenHMAlerts = $HostMaintenance | ? { ( $_.ResolutionState -ne "255" ) }

# Closed VMware server alerts
$ClosedESXAdminAlerts = $VMwareAlerts | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedESXAdminAlerts.Count

$ClosedNonWindows = $NonWindows | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedVMwareTools = $VMwareTools | ? { ( $_.ResolutionState -ne "255" ) }
$ClosedCPUReadyTimeAlerts = $CPUReadyTime | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedVMBalloonAlerts = $VirtualMachineBalloon | ? { ( $_.ResolutionState -eq "255" ) }	
$ClosedHMAlerts = $HostMaintenance | ? { ( $_.ResolutionState -eq "255" ) }




# Build report
$VMwareTeamReport = @()


# Check for alerts 
if ( $VMwareAlerts.Count -eq 0 )
	{
	$Message = "ZERO alerts for VMware Non-Windows Daily report for ($date)"
	$VMwareTeamReport += "ZERO alerts for VMware Non-Windows Daily report for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $VMwareAlerts.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show VMware alerts by Time Raised,NetBiosComputerName,Message
	#
	$VMwareTeamReport += $DSMessage
	$VMwareTeamReport += ""
	$VMwareTeamReport += "# VMware NonWindows Daily report for $($date)"
	$VMwareTeamReport += "#"
	$VMwareTeamReport += "# Alerts since last run = $($VMwareAlerts.Count)"
	$VMwareTeamReport += "#"
	$VMwareTeamReport += "# Total OPEN alerts"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VMware NonWindows alerts = $($OpenVMwareAdminAlerts.Count)"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VM Guest Disk usage alerts = $($OpenNonWindows.Count)"
	$VMwareTeamReport += "# VM tools alerts = $($OpenVMwareTools.Count)"
	$VMwareTeamReport += "# CPU Ready wait time alerts = $($OpenCPUReadyTimeAlerts.Count)"
 	$VMwareTeamReport += "# Balloon memory stolen by host = $($OpenVMBalloonAlerts.Count)"
	$VMwareTeamReport += ""
 	$VMwareTeamReport += "# Maintenance mode alerts = $($OpenHMAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""

	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "# CLOSED alerts"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VMware NonWindows alerts = $($ClosedVMwareAdminAlerts.Count)"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VM Guest Disk usage alerts = $($ClosedNonWindows.Count)"
	$VMwareTeamReport += "# VM tools alerts = $($ClosedVMwareTools.Count)"
	$VMwareTeamReport += "# CPU Ready wait time alerts = $($ClosedCPUReadyTimeAlerts.Count)"
 	$VMwareTeamReport += "# Balloon memory stolen by host = $($ClosedVMBalloonAlerts.Count)"
	$VMwareTeamReport += ""
 	$VMwareTeamReport += "# Maintenance mode alerts = $($ClosedHMAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""
	$VMwareTeamReport += ""


	# Non Windows Guest filesystem
	# $NonWindows | ft TimeRaised,MonitoringObjectDisplayName
	# "VMware: Virtual Machine Overall Guest Disk Usage High"
	if ( $OpenNonWindows.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Virtual Machine Overall Guest Disk Usage alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenNonWindows.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Virtual Machine Overall Guest Disk Usage alert detail"
		$VMwareTeamReport += "#============================================================="
		$VMwareTeamReport += $OpenNonWindows | sort MonitoringObjectDisplayName -uniq | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


	if ( $OpenVMwareTools -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Virtual Machine tool alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenVMwareTools -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Virtual Machine tool alert detail"
		$VMwareTeamReport += "#============================================================="
		$VMwareTeamReport += $OpenVMwareTools | sort MonitoringObjectDisplayName -uniq | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenCPUReadyTimeAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host CPU Ready wait time alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenCPUReadyTimeAlerts.Count -gt 0 )
		{
		($OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq).Count
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host CPU Ready wait time alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		

	if ( $OpenVMBalloonAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Balloon memory stolen by host alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenVMBalloonAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Balloon memory stolen by host alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenVMBalloonAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}

		
 	if ( $OpenHMAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host maintenance mode alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHMAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host maintenance mode alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHMAlerts | select TimeRaised,MonitoringObjectDisplayName | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}

	$VMwareTeamReport += ""
	$VMwareTeamReport += ""
	}

$VMwareTeamReport


$VMwareTeamReport = $VMwareTeamReport | out-string

#============================================================

  $Result = "GOOD"
  $Message = "Proactive DailyTasks Virtualization Team alerts for date ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"$VMwareTeamReport")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$VMwareTeamReport)

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.Virtualization.ESX.MECM.Report.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:13</Start>
                        <End>10:33</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                 <ScriptName>Proactive.Virtualization.ESX.MECM.Report.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware MECM monitors for team
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.ESX.MECM.Report.Datasource.v1024.ps1"
$EventID = "602"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM MECM Team AppOwner Alerts for date ($date).")
$DSMessage = "Proactive DailyTasks MECM Team AppOwner report for date ($date)."


# Pre-req if NiCE Vmware packs installed
	# AppOwner alerts
	$AppOwnerAlerts = get-scomalert -name "Vmware*" | ? { ( $_.MonitoringObjectDisplayName -like "TOBYW0MLAAB700*" ) -AND ( $_.TimeRaised -gt $Time ) }
	$AppOwnerAlerts.Count

	$OpenAppOwnerAlerts = $AppOwnerAlerts | ? { $_.ResolutionState -ne 255 }
	$ClosedAppOwnerAlerts = $AppOwnerAlerts | ? { $_.ResolutionState -eq 255 }
	
	# Debug
	$OpenAppOwnerAlerts.Count
	$ClosedAppOwnerAlerts.Count
	
	# Break out categories
	# CPU Ready Time*    VMware: VirtualMachine Virtual CPU Ready Time (%) is high
	$CPUReady = $AppOwnerAlerts | ? { $_.Name -like "*CPU Ready Time*" }
	$CPUReady.Count

	$OpenCPUReady = $CPUReady | ? { $_.ResolutionState -ne 255 }
	$ClosedCPUReady = $CPUReady | ? { $_.ResolutionState -eq 255 }
	$OpenCPUReady.Count
	$ClosedCPUReady.Count
	
	# Balloon Memory      VMware: Virtual Machine Balloon Memory is High
	$BalloonMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Virtual Machine Balloon Memory is High" }
	$BalloonMemory.Count

	$OpenBalloonMemory = $BalloonMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedBalloonMemory = $BalloonMemory | ? { $_.ResolutionState -eq 255 }
	$OpenBalloonMemory.Count
	$ClosedBalloonMemory.Count
	
	# Swapped Memory    VMware: Virtual Machine Swapped Memory is High
	$SwappedMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Virtual Machine Swapped Memory is High" }
	$SwappedMemory.Count

	$OpenSwappedMemory = $SwappedMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedSwappedMemory = $SwappedMemory | ? { $_.ResolutionState -eq 255 }
	$OpenSwappedMemory.Count
	$ClosedSwappedMemory.Count

	# Storage aborted     VMware: Host Storage Aborted Commands is High
	$StorageAborted = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Host Storage Aborted Commands is High" }
	$StorageAborted.Count
	
	$OpenStorageAborted = $StorageAborted | ? { $_.ResolutionState -ne 255 }
	$ClosedStorageAborted = $StorageAborted | ? { $_.ResolutionState -eq 255 }
	$OpenStorageAborted.Count
	$ClosedStorageAborted.Count
	
	# VMware Tools
	$VMwareTools = $AppOwnerAlerts | ? { $_.Name -like "VMware: Virtual Machine VMware Tools*" }
	$VMwareTools.Count
	
	$OpenVMwareTools = $VMwareTools | ? { $_.ResolutionState -ne 255 }
	$ClosedVMwareTools = $VMwareTools | ? { $_.ResolutionState -eq 255 }
	$OpenVMwareTools.Count
	$ClosedVMwareTools.Count


	# 	Virtual Machine Connection State Alert
	$VMConnection = $AppOwnerAlerts | ? { $_.Name -like "VMware: Virtual Machine Connection State Alert" }
	$VMConnection.Count
	
	$OpenVMConnection = $VMConnection | ? { $_.ResolutionState -ne 255 }
	$ClosedVMConnection = $VMConnection | ? { $_.ResolutionState -eq 255 }
	$OpenVMConnection.Count
	$ClosedVMConnection.Count


	# Remaining alerts
	$RemainingAlerts = $AppOwnerAlerts | ? { ( $_.Name -notlike "*CPU Ready Time*" ) `
		-AND ( $_.Name -ne "VMware: Host Storage Aborted Commands is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Balloon Memory is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Swapped Memory is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Connection State Alert" ) `
		-AND ( $_.Name -notlike "VMware: Virtual Machine VMware Tools*" ) `
		}
	$RemainingAlerts.Count

	$OpenRemainingAlerts = $RemainingAlerts | ? { $_.ResolutionState -ne 255 }
	$ClosedRemainingAlerts = $RemainingAlerts | ? { $_.ResolutionState -eq 255 }
	$OpenRemainingAlerts.Count
	$ClosedRemainingAlerts.Count
	



# Build report
$MECMTeamReport = @()


# Check for alerts 
if ( $AppOwnerAlerts.Count -eq 0 )
	{
	$Message = "ZERO alerts for VMware Team Daily report for ($date)"
	$MECMTeamReport += "ZERO alerts for VMware Team Daily report for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $AppOwnerAlerts.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show VMware alerts by Time Raised,NetBiosComputerName,Message
	#
	$MECMTeamReport += $DSMessage
	$MECMTeamReport += ""
	$MECMTeamReport += "# VMware Team Daily report for $($date)"
	$MECMTeamReport += "#"
	$MECMTeamReport += "# Alerts since last run = $($AppOwnerAlerts.Count)"
	$MECMTeamReport += "#"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# Total OPEN alerts"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# VMware MECM Team alerts = $($OpenAppOwnerAlerts.Count)"
	$MECMTeamReport += ""
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# Balloon Memory stolen from VM's = $($OpenBalloonMemory.Count)"	
	$MECMTeamReport += "# Swapped VM Memory taken by host = $($OpenSwappedMemory.Count)"
	$MECMTeamReport += "# CPU Ready wait time alerts = $($OpenCPUReady.Count)"
	$MECMTeamReport += "# Storage Aborted SCSI commands failed = $($OpenStorageAborted.Count)"
	$MECMTeamReport += "# VMware Tools = $($OpenVMwareTools.Count)"
	$MECMTeamReport += "# VM Connection State = $($OpenVMConnection.Count)"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += ""
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# CLOSED alerts"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# VMware MECM Team alerts = $($ClosedAppOwnerAlerts.Count)"
	$MECMTeamReport += ""
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# Balloon Memory stolen from VM's = $($ClosedBalloonMemory.Count)"	
	$MECMTeamReport += "# Swapped VM Memory taken by host = $($ClosedSwappedMemory.Count)"
	$MECMTeamReport += "# CPU Ready wait time alerts = $($ClosedCPUReady.Count)"
	$MECMTeamReport += "# Storage Aborted SCSI commands failed = $($ClosedStorageAborted.Count)"
	$MECMTeamReport += "# VMware Tools = $($ClosedVMwareTools.Count)"
	$MECMTeamReport += "# VM Connection State = $($ClosedVMConnection.Count)"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += ""
	$MECMTeamReport += ""

	$MECMTeamReport += "#==================="
	$MECMTeamReport += "# OPEN alert details"
	$MECMTeamReport += "#==================="
	$MECMTeamReport += ""
	
	if ( $OpenBalloonMemory.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware MECM Team Balloon Memory alerts for ($date)."
		$MECMTeamReport += ""
		}

	if ( $OpenBalloonMemory.Count -gt 0 )
		{
		$MECMTeamReport += "# VMware Balloon Memory stolen from VM's detail"
		$MECMTeamReport += "#============================================="
		$MECMTeamReport += $OpenBalloonMemory | select TimeRaised,Parameters -auto -wrap | out-string
		$MECMTeamReport += "#========================"
		$MECMTeamReport += ""
		}


 	if ( $OpenSwappedMemory.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware Swapped memory stolen from VM alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $OpenSwappedMemory.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# VMware Swapped memory stolen from VM detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $OpenSwappedMemory | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}


	if ( $OpenCPUReady.count -eq 0 )
		{
		$MECMTeamReport += "ZERO Open VMware CPU Ready Alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $OpenCPUReady.count -gt 0 )
		{
		$MECMTeamReport += "# VMware CPU Ready detail"
		$MECMTeamReport += "#============================================="
		$MECMTeamReport += $OpenCPUReady | ft TimeRaised,Parameters -auto -wrap | out-string
		$MECMTeamReport += "#========================"
		$MECMTeamReport += ""
		}


 	if ( $OpenStorageAborted.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware Storage Aborted alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $OpenStorageAborted.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# VMware Storage Aborted details"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $OpenStorageAborted | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}

		
 	if ( $OpenRemainingAlerts.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware Remaining alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $OpenRemainingAlerts.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# VMware Remaining alert detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $OpenRemainingAlerts | ft TimeRaised,Name,Parameters -auto -wrap | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}
	$MECMTeamReport += ""

	$MECMTeamReport += "#====================="
	$MECMTeamReport += "# CLOSED alert details"
	$MECMTeamReport += "#====================="
	$MECMTeamReport += ""

	if ( $ClosedBalloonMemory.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed VMware Balloon Memory alerts for ($date)."
		$MECMTeamReport += ""
		}

	if ( $ClosedBalloonMemory.Count -gt 0 )
		{
		$MECMTeamReport += "# VMware Balloon Memory stolen from VM's detail"
		$MECMTeamReport += "#============================================="
		$MECMTeamReport += $ClosedBalloonMemory | select TimeRaised,Parameters -auto -wrap | out-string
		$MECMTeamReport += "#========================"
		$MECMTeamReport += ""
		}


	if ( $ClosedCPUReady.count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed VMware CPU Ready Alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedCPUReady.count -gt 0 )
		{
		$MECMTeamReport += "# Closed VMware CPU Ready detail"
		$MECMTeamReport += "#============================================="
		$MECMTeamReport += $ClosedCPUReady | ft TimeRaised,Parameters -auto -wrap | out-string
		$MECMTeamReport += "#========================"
		$MECMTeamReport += ""
		}


 	if ( $ClosedStorageAborted.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed VMware Storage Aborted alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedStorageAborted.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# Closed VMware Storage Aborted details"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $ClosedStorageAborted | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}


 	if ( $ClosedSwappedMemory.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed Swapped memory stolen from VM alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedSwappedMemory.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# Closed VMware Swapped memory stolen from VM detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $ClosedSwappedMemory | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}


 	if ( $ClosedVMwareTools.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware Tool alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedVMwareTools.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# VMware tool alert detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $ClosedVMwareTools | select TimeRaised,MonitoringObjectDisplayName,Name | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}


 	if ( $ClosedRemainingAlerts.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed Remaining alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedRemainingAlerts.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# Closed VMware Remaining alert detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $ClosedRemainingAlerts | ft TimeRaised,Name,Parameters -auto -wrap | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}
	$MECMTeamReport += ""
	}
	
$MECMTeamReport
$MECMTeamReport = $MECMTeamReport | out-string


# Log
#============================================================
$Result = "GOOD"

$Summary = "$MECMTeamReport`n `nDisclaimer:  This daily summary report is to document the manual tasks used to check NiCE VMWare ESX health"

	# Proactive DailyTasks AD Team AppOwner report for date 
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)

	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	
# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.Virtualization.ESX.ADTeam.Report.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:14</Start>
                        <End>10:33</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                 <ScriptName>Proactive.Virtualization.ESX.ADTeam.Report.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware ADTeam monitors for team
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.ESX.ADTeam.Report.Datasource.v1024.ps1"
$EventID = "603"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM AD Team AppOwner Alerts for date ($date).")
$DSMessage = "Proactive DailyTasks AD Team AppOwner report for date ($date)."


# Pre-req if NiCE Vmware packs installed

	# AppOwner alerts
	$AppOwnerAlerts = get-scomalert -name "Vmware*" | ? { ( $_.MonitoringObjectDisplayName -like "*TOBYW4NHAAH0*" ) `
	-OR ( $_.MonitoringObjectDisplayName -like "TOBYW0MLAAA5*" ) `
	-OR ( $_.MonitoringObjectDisplayName -like "TOBYW0MLAAC9*" ) `
	} | ? { ( $_.TimeRaised -gt $Time ) }
	$AppOwnerAlerts.Count

	$OpenAppOwnerAlerts = $AppOwnerAlerts | ? { $_.ResolutionState -ne 255 }
	$ClosedAppOwnerAlerts = $AppOwnerAlerts | ? { $_.ResolutionState -eq 255 }
	
	# Debug
	$OpenAppOwnerAlerts.Count
	$ClosedAppOwnerAlerts.Count
	
	# Break out categories
	# Cluster effective memory pressure VMware: Cluster Effective Memory Pressure is high
	$ClusterMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Cluster Effective Memory Pressure is high" }
	$ClusterMemory.Count

	$OpenClusterMemory = $ClusterMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedClusterMemory = $ClusterMemory | ? { $_.ResolutionState -eq 255 }
	$OpenClusterMemory.Count
	$ClosedClusterMemory.Count
	
	# CPU Ready Time*    VMware: VirtualMachine Virtual CPU Ready Time (%) is high
	$CPUReady = $AppOwnerAlerts | ? { $_.Name -like "*CPU Ready Time*" }
	$CPUReady.Count

	$OpenCPUReady = $CPUReady | ? { $_.ResolutionState -ne 255 }
	$ClosedCPUReady = $CPUReady | ? { $_.ResolutionState -eq 255 }
	$OpenCPUReady.Count
	$ClosedCPUReady.Count
	
	# Balloon Memory      VMware: Virtual Machine Balloon Memory is High
	$BalloonMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Virtual Machine Balloon Memory is High" }
	$BalloonMemory.Count

	$OpenBalloonMemory = $BalloonMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedBalloonMemory = $BalloonMemory | ? { $_.ResolutionState -eq 255 }
	$OpenBalloonMemory.Count
	$ClosedBalloonMemory.Count
	
	# Swapped Memory    VMware: Virtual Machine Swapped Memory is High
	$SwappedMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Virtual Machine Swapped Memory is High" }
	$SwappedMemory.Count

	$OpenSwappedMemory = $SwappedMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedSwappedMemory = $SwappedMemory | ? { $_.ResolutionState -eq 255 }
	$OpenSwappedMemory.Count
	$ClosedSwappedMemory.Count

	# Storage aborted     VMware: Host Storage Aborted Commands is High
	$StorageAborted = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Host Storage Aborted Commands is High" }
	$StorageAborted.Count
	
	$OpenStorageAborted = $StorageAborted | ? { $_.ResolutionState -ne 255 }
	$ClosedStorageAborted = $StorageAborted | ? { $_.ResolutionState -eq 255 }
	$OpenStorageAborted.Count
	$ClosedStorageAborted.Count

	# VMware Tools
	$VMwareTools = $AppOwnerAlerts | ? { $_.Name -like "VMware: Virtual Machine VMware Tools*" }
	$VMwareTools.Count
	
	$OpenVMwareTools = $VMwareTools | ? { $_.ResolutionState -ne 255 }
	$ClosedVMwareTools = $VMwareTools | ? { $_.ResolutionState -eq 255 }
	$OpenVMwareTools.Count
	$ClosedVMwareTools.Count


	# 	Virtual Machine Connection State Alert
	$VMConnection = $AppOwnerAlerts | ? { $_.Name -like "VMware: Virtual Machine Connection State Alert" }
	$VMConnection.Count
	
	$OpenVMConnection = $VMConnection | ? { $_.ResolutionState -ne 255 }
	$ClosedVMConnection = $VMConnection | ? { $_.ResolutionState -eq 255 }
	$OpenVMConnection.Count
	$ClosedVMConnection.Count


	# Remaining alerts
	$RemainingAlerts = $AppOwnerAlerts | ? { ( $_.Name -notlike "*CPU Ready Time*" ) `
		-AND ( $_.Name -ne "VMware: Host Storage Aborted Commands is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Balloon Memory is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Swapped Memory is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Connection State Alert" ) `
		-AND ( $_.Name -notlike "VMware: Virtual Machine VMware Tools*" ) `
		}
	$RemainingAlerts.Count

	$OpenRemainingAlerts = $RemainingAlerts | ? { $_.ResolutionState -ne 255 }
	$ClosedRemainingAlerts = $RemainingAlerts | ? { $_.ResolutionState -eq 255 }
	$OpenRemainingAlerts.Count
	$ClosedRemainingAlerts.Count

	

# Build report
$ADTeamReport = @()


# Check for alerts 
if ( $AppOwnerAlerts.Count -eq 0 )
	{
	$Message = "ZERO alerts for VMware AD Team Daily report for ($date)"
	$ADTeamReport += "ZERO alerts for VMware AD Team Daily report for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $AppOwnerAlerts.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show VMware alerts by Time Raised,NetBiosComputerName,Message
	#
	$ADTeamReport += $DSMessage
	$ADTeamReport += ""
	$ADTeamReport += "# VMware AD Team Daily report for $($date)"
	$ADTeamReport += "#"
	$ADTeamReport += "# Alerts since last run = $($AppOwnerAlerts.Count)"
	$ADTeamReport += "#"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# Total OPEN alerts"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# VMware AD Team alerts = $($OpenAppOwnerAlerts.Count)"
	$ADTeamReport += ""
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# Balloon Memory stolen from VM's = $($OpenBalloonMemory.Count)"	
	$ADTeamReport += "# Swapped VM Memory taken by host = $($OpenSwappedMemory.Count)"
	$ADTeamReport += "# CPU Ready wait time alerts = $($OpenCPUReady.Count)"
	$ADTeamReport += "# Storage Aborted SCSI commands failed = $($OpenStorageAborted.Count)"
	$ADTeamReport += "# VMware Tools = $($OpenVMwareTools.Count)"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += ""
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# CLOSED alerts"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# VMware AD Team alerts = $($ClosedAppOwnerAlerts.Count)"
	$ADTeamReport += ""
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# Balloon Memory stolen from VM's = $($ClosedBalloonMemory.Count)"	
	$ADTeamReport += "# Swapped VM Memory taken by host = $($ClosedSwappedMemory.Count)"
	$ADTeamReport += "# CPU Ready wait time alerts = $($ClosedCPUReady.Count)"
	$ADTeamReport += "# Storage Aborted SCSI commands failed = $($ClosedStorageAborted.Count)"
	$ADTeamReport += "# VMware Tools = $($ClosedVMwareTools.Count)"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += ""
	$ADTeamReport += ""

	$ADTeamReport += "#==================="
	$ADTeamReport += "# OPEN alert details"
	$ADTeamReport += "#==================="
	$ADTeamReport += ""
	
	if ( $OpenBalloonMemory.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Balloon Memory alerts for ($date)."
		$ADTeamReport += ""
		}

	if ( $OpenBalloonMemory.Count -gt 0 )
		{
		$ADTeamReport += "# VMware Balloon Memory stolen from VM's detail"
		$ADTeamReport += "#============================================="
		$ADTeamReport += $OpenBalloonMemory | select TimeRaised,Parameters -auto -wrap | out-string
		$ADTeamReport += "#========================"
		$ADTeamReport += ""
		}


 	if ( $OpenSwappedMemory.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Swapped memory stolen from VM alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenSwappedMemory.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware Swapped memory stolen from VM detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $OpenSwappedMemory | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


	if ( $OpenCPUReady.count -eq 0 )
		{
		$ADTeamReport += "ZERO Open VMware CPU Ready Alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenCPUReady.count -gt 0 )
		{
		$ADTeamReport += "# VMware CPU Ready detail"
		$ADTeamReport += "#============================================="
		$ADTeamReport += $OpenCPUReady | ft TimeRaised,Parameters -auto -wrap | out-string
		$ADTeamReport += "#========================"
		$ADTeamReport += ""
		}


 	if ( $OpenStorageAborted.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Storage Aborted alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenStorageAborted.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware Storage Aborted details"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $OpenStorageAborted | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


 	if ( $OpenVMwareTools.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Tools alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenVMwareTools.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware tools alert detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $OpenVMwareTools | select TimeRaised,MonitoringObjectDisplayName,Name | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


 	if ( $OpenRemainingAlerts.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Remaining alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenRemainingAlerts.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware Remaining alert detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $OpenRemainingAlerts | ft TimeRaised,Name,Parameters -auto -wrap | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}
	$ADTeamReport += ""

	$ADTeamReport += "#====================="
	$ADTeamReport += "# CLOSED alert details"
	$ADTeamReport += "#====================="
	$ADTeamReport += ""

	if ( $ClosedBalloonMemory.Count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed VMware Balloon Memory alerts for ($date)."
		$ADTeamReport += ""
		}

	if ( $ClosedBalloonMemory.Count -gt 0 )
		{
		$ADTeamReport += "# VMware Balloon Memory stolen from VM's detail"
		$ADTeamReport += "#============================================="
		$ADTeamReport += $ClosedBalloonMemory | select TimeRaised,Parameters -auto -wrap | out-string
		$ADTeamReport += "#========================"
		$ADTeamReport += ""
		}


	if ( $ClosedCPUReady.count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed VMware CPU Ready Alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedCPUReady.count -gt 0 )
		{
		$ADTeamReport += "# Closed VMware CPU Ready detail"
		$ADTeamReport += "#============================================="
		$ADTeamReport += $ClosedCPUReady | ft TimeRaised,Parameters -auto -wrap | out-string
		$ADTeamReport += "#========================"
		$ADTeamReport += ""
		}


 	if ( $ClosedStorageAborted.Count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed VMware Storage Aborted alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedStorageAborted.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# Closed VMware Storage Aborted details"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $ClosedStorageAborted | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


 	if ( $ClosedSwappedMemory.Count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed VMware Swapped memory stolen from VM alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedSwappedMemory.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# Closed VMware Swapped memory stolen from VM detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $ClosedSwappedMemory | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


 	if ( $ClosedVMwareTools.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Tool alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedVMwareTools.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware tool alert detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $ClosedVMwareTools | select TimeRaised,MonitoringObjectDisplayName,Name | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


 	if ( $ClosedRemainingAlerts.Count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed VMware Remaining alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedRemainingAlerts.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# Closed VMware Remaining alert detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $ClosedRemainingAlerts | ft TimeRaised,Name,Parameters -auto -wrap | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}
	$ADTeamReport += ""
	}
$ADTeamReport
$ADTeamReport = $ADTeamReport | out-string

# Log
#============================================================
$Result = "GOOD"

$Summary = "$ADTeamReport`n `nDisclaimer:  This daily summary report is to document the manual tasks used to check NiCE VMWare ESX health"

	# Proactive DailyTasks AD Team AppOwner report for date 
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)

	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	
# Return all bags
$bag



# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Proactive.Virtualization.AlertClosure.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>10:21</Start>
                        <End>10:41</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                 <ScriptName>Proactive.Virtualization.AlertClosure.Datasource.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware monitors and close (after daily report has run)
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.AlertClosure.Datasource.v1024.ps1"
$EventID = "600"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set the condition = bad.  This represents your script finding something wrong
$strCondition = "Bad"

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive Virtualization Alert to cleanup for date ($date).")

$DSMessage = "Proactive DailyTasks Virtualization Alert Closure cleanup for date ($date)."


# Reset Monitors
# From Andrew Bradley - 
# Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
$SCOMCoreMP = Get-SCOMManagementPack -DisplayName "NiCE VMware *"
$SCOMCoreRules = $SCOMCoreMP.GetRules()
$SCOMCoreMonitors = $SCOMCoreMP.GetMonitors()
$SCOMCoreReportAlerts = Get-SCOMAlert | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }

$SCOMCoreRuleAlerts = Get-SCOMAlert | ? { ( $_.Name -in $SCOMCoreRules.DisplayName) }
$SCOMCoreRuleAlerts.Count
$SCOMCoreMonitorAlerts = Get-SCOMAlert | ? { ($_.Name -in $SCOMCoreMonitors.DisplayName ) }
$SCOMCoreMonitorAlerts.Count



# Reset Monitors logic

if ( $SCOMCoreMonitorAlerts.Count -gt 0 )
	{
	$Monitors = @( Get-SCOMMonitor -DisplayName $SCOMCoreMonitorAlerts )
 	
	foreach ($Monitor in $Monitors)
		{
		$MonitorClass = Get-SCOMClass -Id $Monitor.Target.Id
		$ActiveMonitors = Get-SCOMClassInstance -Class $MonitorClass | ? { ( $_.healthstate -ne "Success" ) -AND ( $_.healthstate -ne "Uninitialized" ) -AND ($_.IsAvailable -eq $true ) }
		write-host "Found $ActiveMonitors.Count active monitors." 
		if ( $ActiveMonitors -ne $null)
			{
			foreach ($ActiveMonitor in $ActiveMonitors)
				{
				write-host "Resetting Health State on $ActiveMonitor.FullName $ActiveMonitor.ResetMonitoringState($Monitor.ID) "
				}
			}
		}
	}


#
# (Rules) Alerts to auto close after reset monitor
#	$DNSAlertsToClose | Resolve-SCOMAlert
$SCOMCoreRuleAlerts | Resolve-SCOMAlert



# Log 
$Summary = "NiCE VMware alerts closed for date ($date)`n `n $DSMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used to check NiCE VMWare ESX health"

	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)

	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	
# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>

      <WriteActionModuleType ID="Proactive.Virtualization.ESX.Admin.Reports.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.Virtualization.ESX.Admin.Reports.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware  alerts
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.ESX.Admin.Reports.WA.v1024.ps1"
$EventID = "599"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather VMware Alerts for date ($date).")

$DSMessage = "Proactive DailyTasks Virtualization Team alerts for date ($date)."



# Gather ADDS alerts
# Monitors then rules
# Virtualization Team report alerts

# Cluster alerts
# Virtualization Team report alerts
$Cluster = get-scomalert -name  "VMware: Cluster*" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc
	#| select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

$DataCenter = get-scomalert -name  "VMware: Datacenter*" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc 
	#| select TimeRaised,Parameters -auto -wrap

$Datastore = get-scomalert -name "VMware: Datastore*" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc 
	# | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

$VMHost = get-scomalert -name  "VMware: Host*" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc 
	# | select TimeRaised,Parameters -auto -wrap

$ResourcePool = get-scomalert -name  "VMware: Resource Pool*" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc 
	# | select TimeRaised,Parameters -auto -wrap

$NetworkLink = get-scomalert -name  "Host System Network Adapter Link Is Not Connected" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc

# Hot running cluster - Memory Pressure break out
$MemoryPressure = $Cluster | ? { $_.Name -eq "VMware: Cluster Effective Memory Pressure is high" }
	# | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

# VM waiting for CPU - CPU Ready time
$CPUReadyTime = get-scomalert -name "VMware: VirtualMachine Virtual CPU Ready Time (%) is high" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc 
	#|ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

# VM Storage availability
$StorageAborted = $VMhost | ? { $_.Name -eq "VMware: Host Storage Aborted Commands is High" } | sort -property MonitoringObjectDisplayName 
	#| select TimeRaised,Description -auto -wrap

# Need VM memory performance alerts
$VirtualMachineBalloon = get-scomalert -name "VMware: Virtual Machine Balloon Memory is High" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc
	#|ft TimeRaised,Parameters -auto -wrap

# Host read/writes or shared memory high
$HostWrite = $VMhost | ? { $_.Name -eq "VMware: Host Storage Write Data Rate is High" } 
	#| ? { ( $_.TimeRaised -ge $Time ) } | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap
$HostRead = $VMhost | ? { $_.Name -eq "VMware: Host Storage Read Data Rate is High" }
	#| ? { ( $_.TimeRaised -ge $Time ) } | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap
$HostSharedMemory = $Vmhost | ? { $_.Name -eq "VMware: Host System Shared Memory is High" }
	#| select TimeRaised,Parameters  -auto -wrap

# Host hardware alerts
$HostMemoryFault = get-scomalert -name "NiCE VMware vSphere Host Memory Sensor Group Monitor" | ? { ( $_.TimeRaised -ge $Time ) }
	#|ft TimeRaised,Parameters -auto -wrap
$HostPowerFault = get-scomalert -name "VMware: Fault detected in Host Power Sensor Group"
	# |ft TimeRaised,Parameters -auto -wrap


# Resource Pool
$ResourcePoolMemory = $ResourcePool | ? { $_.Name -eq "VMware: Resource Pool Overhead Memory is High" }
	# | ? { ( $_.TimeRaised -ge $Time ) } | select TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

# Host maintenance alerts
$HostMaintenance = $VMHost | ? { $_.Name -eq "VMware: Host is in Maintenance Mode" }

  
# Tally up all the VMware alerts since last report
$VMwareAlerts = $Cluster + $DataCenter + $Datastore + $VMHost + $ResourcePool + $MemoryPressure + $CPUReadyTime `
	+ $StorageAborted + $VirtualMachineBalloon + $HostWrite + $HostRead + $HostSharedMemory + $HostMemoryFault `
	+ $HostPowerFault + $ResourcePoolMemory + $HostMaintenance + $NetworkLink

$VMwareAlerts.Count




# Open ESX VMware server alerts
$OpenVMwareAdminAlerts = $VMwareAlerts	| ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMwareAdminAlerts.Count

$OpenClusterAlerts = $Cluster | ? { ( $_.ResolutionState -ne "255" ) }
$OpenDataCenterAlerts = $DataCenter | ? { ( $_.ResolutionState -ne "255" ) }
$OpenDatastoreAlerts = $Datastore | ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMHostAlerts = $VMHost | ? { ( $_.ResolutionState -ne "255" ) }
$OpenRPoolAlerts = $ResourcePool | ? { ( $_.ResolutionState -ne "255" ) }
$OpenNetworkLink = $NetworkLink | ? { ( $_.ResolutionState -ne "255" ) }
$OpenMemoryPressureAlerts = $MemoryPressure | ? { ( $_.ResolutionState -ne "255" ) }
$OpenCPUReadyTimeAlerts = $CPUReadyTime | ? { ( $_.ResolutionState -ne "255" ) }
$OpenStorageAbortedAlerts = $StorageAborted | ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMBalloonAlerts = $VirtualMachineBalloon | ? { ( $_.ResolutionState -ne "255" ) }	
$OpenHostWriteAlerts = $HostWrite | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHostReadAlerts = $HostRead | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHostSharedAlerts = $HostSharedMemory | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHostMemoryAlerts = $HostMemoryFault | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHostPowerAlerts = $HostPowerFault | ? { ( $_.ResolutionState -ne "255" ) }
$OpenRPMemoryAlerts = $ResourcePoolMemory | ? { ( $_.ResolutionState -ne "255" ) }
$OpenHMAlerts = $HostMaintenance | ? { ( $_.ResolutionState -ne "255" ) }

# Closed VMware server alerts
$ClosedESXAdminAlerts = $VMwareAlerts | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedESXAdminAlerts.Count

$ClosedClusterAlerts = $Cluster | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedDataCenterAlerts = $DataCenter | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedDatastoreAlerts = $Datastore | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedVMHostAlerts = $VMHost | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedRPoolAlerts = $ResourcePool | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedNetworkLink = $NetworkLink | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedMemoryPressureAlerts = $MemoryPressure | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedCPUReadyTimeAlerts = $CPUReadyTime | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedStorageAbortedAlerts = 	$StorageAborted | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedVMBalloonAlerts = $VirtualMachineBalloon | ? { ( $_.ResolutionState -eq "255" ) }	
$ClosedHostWriteAlerts = $HostWrite | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHostReadAlerts = $HostRead | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHostSharedAlerts = $HostSharedMemory | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHostMemoryAlerts = $HostMemoryFault | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHostPowerAlerts = $HostPowerFault | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedRPMemoryAlerts = $ResourcePoolMemory | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedHMAlerts = $HostMaintenance | ? { ( $_.ResolutionState -eq "255" ) }




# Build report
$VMwareTeamReport = @()


# Check for alerts 
if ( $VMwareAlerts.Count -eq 0 )
	{
	$Message = "ZERO alerts for VMware Team Daily report for ($date)"
	$VMwareTeamReport += "ZERO alerts for VMware Team Daily report for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $VMwareAlerts.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show VMware alerts by Time Raised,NetBiosComputerName,Message
	#
	$VMwareTeamReport += $DSMessage
	$VMwareTeamReport += ""
	$VMwareTeamReport += "# VMware Team Daily report for $($date)"
	$VMwareTeamReport += "#"
	$VMwareTeamReport += "# Alerts since last run = $($VMwareAlerts.Count)"
	$VMwareTeamReport += "#"
	$VMwareTeamReport += "# Total OPEN alerts"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VMware Team alerts = $($OpenVMwareAdminAlerts.Count)"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# Cluster alerts = $($OpenClusterAlerts.Count)"
	$VMwareTeamReport += "# CPU Ready wait time alerts = $($OpenCPUReadyTimeAlerts.Count)"
	$VMwareTeamReport += "# DataCenter alerts = $($OpenDataCenterAlerts.Count)"
	$VMwareTeamReport += "# Datastore alerts = $($OpenDatastoreAlerts.Count)"
	$VMwareTeamReport += "# Memory Pressure cluster alerts = $($OpenMemoryPressureAlerts.Count)"
 	$VMwareTeamReport += "# Network link down alerts =  $($OpenNetworkLink.Count)"
 	$VMwareTeamReport += "# Resource Pool alerts = $($OpenRPoolAlerts.Count)"
 	$VMwareTeamReport += "# Resource Pool Memory alerts = $($OpenRPMemoryAlerts.Count)"
 	$VMwareTeamReport += "# Storage Aborted failure alerts = $($OpenStorageAbortedAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
 	$VMwareTeamReport += "# Host alerts = $($VMHost.Count)"
	$VMwareTeamReport += "#========================================================"
 	$VMwareTeamReport += "# Balloon memory stolen by host = $($OpenVMBalloonAlerts.Count)"
 	$VMwareTeamReport += "# Memory hardware alerts = $($OpenHostMemoryAlerts.Count)"
 	$VMwareTeamReport += "# Power hardware alerts = $($OpenHostPowerAlerts.Count)"
 	$VMwareTeamReport += "# Shared memory alerts = $($OpenHostSharedAlerts.Count)"
 	$VMwareTeamReport += "# Storage read alerts = $($OpenHostReadAlerts.Count)"
 	$VMwareTeamReport += "# Storage write alerts = $($OpenHostWriteAlerts.Count)"
	$VMwareTeamReport += ""
 	$VMwareTeamReport += "# Maintenance mode alerts = $($OpenHMAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""

	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "# CLOSED alerts"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VMware Team alerts = $($ClosedVMwareAdminAlerts.Count)"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# Cluster alerts = $($ClosedClusterAlerts.Count)"
	$VMwareTeamReport += "# CPU Ready wait time alerts = $($ClosedCPUReadyTimeAlerts.Count)"
	$VMwareTeamReport += "# DataCenter alerts = $($ClosedDataCenterAlerts.Count)"
	$VMwareTeamReport += "# Datastore alerts = $($ClosedDatastoreAlerts.Count)"
	$VMwareTeamReport += "# Memory Pressure cluster alerts = $($ClosedMemoryPressureAlerts.Count)"
 	$VMwareTeamReport += "# Network link down alerts =  $($ClosedNetworkLink.Count)"
 	$VMwareTeamReport += "# Resource Pool alerts = $($ClosedRPoolAlerts.Count)"
 	$VMwareTeamReport += "# Resource Pool Memory alerts = $($ClosedRPMemoryAlerts.Count)"
 	$VMwareTeamReport += "# Storage Aborted failure alerts = $($ClosednStorageAbortedAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
 	$VMwareTeamReport += "# Balloon memory stolen by host = $($ClosedVMBalloonAlerts.Count)"
 	$VMwareTeamReport += "# Memory hardware alerts = $($ClosedHostMemoryAlerts.Count)"
 	$VMwareTeamReport += "# Power hardware alerts = $($ClosedHostPowerAlerts.Count)"
 	$VMwareTeamReport += "# Shared memory alerts = $($ClosedHostSharedAlerts.Count)"
 	$VMwareTeamReport += "# Storage read alerts = $($ClosedHostReadAlerts.Count)"
 	$VMwareTeamReport += "# Storage write alerts = $($ClosedHostWriteAlerts.Count)"
	$VMwareTeamReport += ""
 	$VMwareTeamReport += "# Maintenance mode alerts = $($ClosedHMAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""
	$VMwareTeamReport += ""



	if ( $OpenClusterAlerts.count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware cluster issues for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenClusterAlerts.count -gt 0 )
		{
		$VMwareTeamReport += "# VMware cluster alert detail"
		$VMwareTeamReport += "#============================================="
		$VMwareTeamReport += $OpenClusterAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#========================"
		$VMwareTeamReport += ""
		}


	if ( $OpenDataCenterAlerts.count -eq 0 )
		{
		$VMwareTeamReport += "ZERO Open DataCenter Alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenDataCenterAlerts.count -gt 0 )
		{
		$VMwareTeamReport += "# VMware DataCenter alert detail"
		$VMwareTeamReport += "#============================================="
		$VMwareTeamReport += $OpenDataCenterAlerts | select TimeRaised,Parameters | out-string
		$VMwareTeamReport += "#========================"
		$VMwareTeamReport += ""
		}
	
		
 	if ( $OpenDatastoreAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Datastore alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenDatastoreAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Datastore availability and write delay detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenDatastoreAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenResourcePoolAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware ResourcePool alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenResourcePoolAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware ResourcePool alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenResourcePoolAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenNetworkLink.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Network link adapter down alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenResourcePoolAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Network link adapter down alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenNetworkLink | sort -property MonitoringObjectDisplayName | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += ""
		}


 	if ( $OpenMemoryPressureAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Cluster Memory Pressure alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenMemoryPressureAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Cluster Memory Pressure alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenMemoryPressureAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenVMBalloonAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Balloon memory stolen by host alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenVMBalloonAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Balloon memory stolen by host alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenVMBalloonAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenCPUReadyTimeAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host CPU Ready wait time alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenCPUReadyTimeAlerts.Count -gt 0 )
		{
		($OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq).Count
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host CPU Ready wait time alert detail"
		$VMwareTeamReport += "#=============================="
		#$VMwareTeamReport += ($OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq).Count
		#$OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		#$VMwareTeamReport += "#============================================================"
		#$VMwareTeamReport += ""
		}
		

 	if ( $OpenStorageAbortedAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Storage Aborted Host alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenStorageAbortedAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Storage Aborted Host alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += "Multiple Hosts with 150+ SCSI storage errors in an hour"
		$VMwareTeamReport += $OpenStorageAbortedAlerts | ft TimeRaised,MonitoringObjectDisplayName -auto -wrap | out-string
		#$VMwareTeamReport += $OpenStorageAbortedAlerts | ft TimeRaised,Description -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		

 	if ( $OpenVMBalloonAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Balloon memory stolen by host alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenVMBalloonAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Balloon memory stolen by host alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenVMBalloonAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenHostWriteAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Storage Write Data Rate alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostWriteAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Storage Write Data Rate alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostWriteAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenHostReadAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Storage Read Data Rate alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostReadAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Storage Read Data Rate alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostReadAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenHostSharedAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host System Shared Memory alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostSharedAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host System Shared Memory alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostSharedAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		

 	if ( $OpenHostMemoryAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Memory hardware alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostMemoryAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Memory hardware alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostMemoryAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenHostPowerAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host Power fault alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHostPowerAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host Power faults alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHostPowerAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		

 	if ( $OpenRPMemoryAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host CPU Ready wait time alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenRPMemoryAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host CPU Ready wait time alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += "NOTE Details sent to AppOwner"
		#$VMwareTeamReport += $OpenRPMemoryAlerts | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}


 	if ( $OpenVMHostAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host remaining alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenVMHostAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host remaining alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenVMHostAlerts | ? { ( $_.Name -eq "Host Virtual CPU Ready Time*" ) `
		-AND ( $_.Name -eq "VMware: Host Storage Aborted Commands is High" ) `
		-AND ( $_.Name -eq "VMware: Host Storage Write Data Rate is High" ) `
		-AND ( $_.Name -eq "VMware: Host Storage Read Data Rate is High" ) `
		-AND ( $_.Name -ne "VMware: Host System Shared Memory is High" ) `
		} | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}

		
 	if ( $OpenHMAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host maintenance mode alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHMAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host maintenance mode alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHMAlerts | select TimeRaised,MonitoringObjectDisplayName | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}

	$VMwareTeamReport += ""
	$VMwareTeamReport += ""
	}

$VMwareTeamReport


$VMwareTeamReport = $VMwareTeamReport | out-string

#============================================================

  $Result = "GOOD"
  $Message = "Proactive DailyTasks Virtualization Team alerts for date ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"$VMwareTeamReport")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$VMwareTeamReport)

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.Virtualization.ESX.NonWindows.Reports.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.Virtualization.ESX.NonWindows.Report.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware non-Windows alerts
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.ESX.NonWindows.Report.WA.v1024.ps1"
$EventID = "599"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather VMware NonWIndows Alerts for date ($date).")

$DSMessage = "Proactive DailyTasks Non-Windows alerts task for date ($date)."



# Gather ADDS alerts
# Monitors then rules
# Virtualization Team report alerts
#
# Non-Windows alerts
$NonWindows = get-scomalert -name "VMware: Virtual Machine Overall Guest Disk Usage High" 
# | ft TimeRaised,MonitoringObjectDisplayName |more

# VM waiting for CPU - CPU Ready time
$CPUReadyTime = get-scomalert -name "VMware: VirtualMachine Virtual CPU Ready Time (%) is high" | ? { ( $_.TimeRaised -ge $Time ) } | sort  -property TimeRaised -desc 
	#|ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap

# Need VM memory performance alerts
$VirtualMachineBalloon = get-scomalert -name "VMware: Virtual Machine Balloon Memory is High" | ? { ( $_.TimeRaised -ge $Time ) } | sort -property TimeRaised -desc
	#|ft TimeRaised,Parameters -auto -wrap

# Host maintenance alerts
$HostMaintenance = $VMHost | ? { $_.Name -eq "VMware: Host is in Maintenance Mode" }

  
# Tally up all the VMware alerts since last report
$VMwareAlerts = $NonWindows + $CPUReadyTime + $VirtualMachineBalloon + $HostMaintenance
$VMwareAlerts.Count




# Open ESX VMware server alerts
$OpenVMwareAdminAlerts = $VMwareAlerts	| ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMwareAdminAlerts.Count

$OpenNonWindows = $NonWindows | ? { ( $_.ResolutionState -ne "255" ) }
$OpenCPUReadyTimeAlerts = $CPUReadyTime | ? { ( $_.ResolutionState -ne "255" ) }
$OpenVMBalloonAlerts = $VirtualMachineBalloon | ? { ( $_.ResolutionState -ne "255" ) }	
$OpenHMAlerts = $HostMaintenance | ? { ( $_.ResolutionState -ne "255" ) }

# Closed VMware server alerts
$ClosedESXAdminAlerts = $VMwareAlerts | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedESXAdminAlerts.Count

$ClosedNonWindows = $NonWindows | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedCPUReadyTimeAlerts = $CPUReadyTime | ? { ( $_.ResolutionState -eq "255" ) }
$ClosedVMBalloonAlerts = $VirtualMachineBalloon | ? { ( $_.ResolutionState -eq "255" ) }	
$ClosedHMAlerts = $HostMaintenance | ? { ( $_.ResolutionState -eq "255" ) }




# Build report
$VMwareTeamReport = @()


# Check for alerts 
if ( $VMwareAlerts.Count -eq 0 )
	{
	$Message = "ZERO alerts for VMware Non-Windows Daily report for ($date)"
	$VMwareTeamReport += "ZERO alerts for VMware Non-Windows Daily report for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $VMwareAlerts.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show VMware alerts by Time Raised,NetBiosComputerName,Message
	#
	$VMwareTeamReport += $DSMessage
	$VMwareTeamReport += ""
	$VMwareTeamReport += "# VMware NonWindows Daily report for $($date)"
	$VMwareTeamReport += "#"
	$VMwareTeamReport += "# Alerts since last run = $($VMwareAlerts.Count)"
	$VMwareTeamReport += "#"
	$VMwareTeamReport += "# Total OPEN alerts"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VMware NonWindows alerts = $($OpenVMwareAdminAlerts.Count)"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VM Guest Disk usage alerts = $($OpenNonWindows.Count)"
	$VMwareTeamReport += "# CPU Ready wait time alerts = $($OpenCPUReadyTimeAlerts.Count)"
 	$VMwareTeamReport += "# Balloon memory stolen by host = $($OpenVMBalloonAlerts.Count)"
	$VMwareTeamReport += ""
 	$VMwareTeamReport += "# Maintenance mode alerts = $($OpenHMAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""

	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "# CLOSED alerts"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VMware NonWindows alerts = $($ClosedVMwareAdminAlerts.Count)"
	$VMwareTeamReport += ""
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += "# VM Guest Disk usage alerts = $($ClosedNonWindows.Count)"
	$VMwareTeamReport += "# CPU Ready wait time alerts = $($ClosedCPUReadyTimeAlerts.Count)"
 	$VMwareTeamReport += "# Balloon memory stolen by host = $($ClosedVMBalloonAlerts.Count)"
	$VMwareTeamReport += ""
 	$VMwareTeamReport += "# Maintenance mode alerts = $($ClosedHMAlerts.Count)"
	$VMwareTeamReport += "#========================================================"
	$VMwareTeamReport += ""
	$VMwareTeamReport += ""


	# Non Windows Guest filesystem
	# $NonWindows | ft TimeRaised,MonitoringObjectDisplayName
	# "VMware: Virtual Machine Overall Guest Disk Usage High"
	if ( $NonWindows.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Virtual Machine Overall Guest Disk Usage alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $NonWindows.Count -gt 0 )
		{
		($NonWindows | sort MonitoringObjectDisplayName -uniq).Count
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Virtual Machine Overall Guest Disk Usage alert detail"
		$VMwareTeamReport += "#============================================================="
		$VMwareTeamReport += $OpenNonWindows | sort MonitoringObjectDisplayName -uniq | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}
		

 	if ( $OpenCPUReadyTimeAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host CPU Ready wait time alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenCPUReadyTimeAlerts.Count -gt 0 )
		{
		($OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq).Count
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host CPU Ready wait time alert detail"
		$VMwareTeamReport += "#=============================="
		#$VMwareTeamReport += ($OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq).Count
		#$OpenCPUReadyTimeAlerts | sort MonitoringObjectDisplayName -uniq | ft TimeRaised,MonitoringObjectDisplayName,Parameters -auto -wrap | out-string
		#$VMwareTeamReport += "#============================================================"
		#$VMwareTeamReport += ""
		}
		

	if ( $OpenVMBalloonAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Balloon memory stolen by host alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenVMBalloonAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Balloon memory stolen by host alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenVMBalloonAlerts | ft TimeRaised,Parameters -auto -wrap | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}

		
 	if ( $OpenHMAlerts.Count -eq 0 )
		{
		$VMwareTeamReport += "ZERO VMware Host maintenance mode alerts for ($date)."
		$VMwareTeamReport += ""
		}
		
	if ( $OpenHMAlerts.Count -gt 0 )
		{
		$VMwareTeamReport += ""
		$VMwareTeamReport += "# VMware Host maintenance mode alert detail"
		$VMwareTeamReport += "#=============================="
		$VMwareTeamReport += $OpenHMAlerts | select TimeRaised,MonitoringObjectDisplayName | out-string
		$VMwareTeamReport += "#============================================================"
		$VMwareTeamReport += ""
		}

	$VMwareTeamReport += ""
	$VMwareTeamReport += ""
	}

$VMwareTeamReport


$VMwareTeamReport = $VMwareTeamReport | out-string

#============================================================

  $Result = "GOOD"
  $Message = "Proactive DailyTasks Virtualization Team alerts for date ($date)"

  $momapi.LogScriptEvent($ScriptName,$EventID,0,"$VMwareTeamReport")

#$bag.AddValue('Result',$Result)
$bag.AddValue('Count',$Test)
$bag.AddValue('Message',$Message)
$bag.AddValue('Summary',$VMwareTeamReport)

# Return all bags
$bag
#=================================================================================
# End MAIN script section
 
  
# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.Virtualization.ESX.MECM.Reports.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.Virtualization.ESX.MECM.Reports.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware  alerts
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.ESX.MECM.Reports.WA.v1024.ps1"
$EventID = "602"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM MECM Team AppOwner Alerts for date ($date).")
$DSMessage = "Proactive DailyTasks MECM Team AppOwner report task for date ($date)."


# Pre-req if NiCE Vmware packs installed

	# AppOwner alerts
	$AppOwnerAlerts = get-scomalert -name "Vmware*" | ? { ( $_.MonitoringObjectDisplayName -like "TOBYW0MLAAB700*" ) -AND ( $_.TimeRaised -gt $Time ) }
	$AppOwnerAlerts.Count

	$OpenAppOwnerAlerts = $AppOwnerAlerts | ? { $_.ResolutionState -ne 255 }
	$ClosedAppOwnerAlerts = $AppOwnerAlerts | ? { $_.ResolutionState -eq 255 }
	
	# Debug
	$OpenAppOwnerAlerts.Count
	$ClosedAppOwnerAlerts.Count
	
	# Break out categories
	# Cluster effective memory pressure VMware: Cluster Effective Memory Pressure is high
	$ClusterMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Cluster Effective Memory Pressure is high" }
	$ClusterMemory.Count

	$OpenClusterMemory = $ClusterMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedClusterMemory = $ClusterMemory | ? { $_.ResolutionState -eq 255 }
	$OpenClusterMemory.Count
	$ClosedClusterMemory.Count
	
	# CPU Ready Time*    VMware: VirtualMachine Virtual CPU Ready Time (%) is high
	$CPUReady = $AppOwnerAlerts | ? { $_.Name -like "*CPU Ready Time*" }
	$CPUReady.Count

	$OpenCPUReady = $CPUReady | ? { $_.ResolutionState -ne 255 }
	$ClosedCPUReady = $CPUReady | ? { $_.ResolutionState -eq 255 }
	$OpenCPUReady.Count
	$ClosedCPUReady.Count
	
	# Balloon Memory      VMware: Virtual Machine Balloon Memory is High
	$BalloonMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Virtual Machine Balloon Memory is High" }
	$BalloonMemory.Count

	$OpenBalloonMemory = $BalloonMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedBalloonMemory = $BalloonMemory | ? { $_.ResolutionState -eq 255 }
	$OpenBalloonMemory.Count
	$ClosedBalloonMemory.Count
	
	# Swapped Memory    VMware: Virtual Machine Swapped Memory is High
	$SwappedMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Virtual Machine Swapped Memory is High" }
	$SwappedMemory.Count

	$OpenSwappedMemory = $SwappedMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedSwappedMemory = $SwappedMemory | ? { $_.ResolutionState -eq 255 }
	$OpenSwappedMemory.Count
	$ClosedSwappedMemory.Count

	# Storage aborted     VMware: Host Storage Aborted Commands is High
	$StorageAborted = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Host Storage Aborted Commands is High" }
	$StorageAborted.Count
	
	$OpenStorageAborted = $StorageAborted | ? { $_.ResolutionState -ne 255 }
	$ClosedStorageAborted = $StorageAborted | ? { $_.ResolutionState -eq 255 }
	$OpenStorageAborted.Count
	$ClosedStorageAborted.Count

	# 	Virtual Machine Connection State Alert
	$VMConnection = $AppOwnerAlerts | ? { $_.Name -like "VMware: Virtual Machine Connection State Alert" }
	$VMConnection.Count
	
	$OpenVMConnection = $VMConnection | ? { $_.ResolutionState -ne 255 }
	$ClosedVMConnection = $VMConnection | ? { $_.ResolutionState -eq 255 }
	$OpenVMConnection.Count
	$ClosedVMConnection.Count


	# Remaining alerts
	$RemainingAlerts = $AppOwnerAlerts | ? { ( $_.Name -notlike "*CPU Ready Time*" ) `
		-AND ( $_.Name -ne "VMware: Host Storage Aborted Commands is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Balloon Memory is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Swapped Memory is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Connection State Alert" ) `
		-AND ( $_.Name -notlike "VMware: Virtual Machine VMware Tools*" ) `
		}
	$RemainingAlerts.Count

	$OpenRemainingAlerts = $RemainingAlerts | ? { $_.ResolutionState -ne 255 }
	$ClosedRemainingAlerts = $RemainingAlerts | ? { $_.ResolutionState -eq 255 }
	$OpenRemainingAlerts.Count
	$ClosedRemainingAlerts.Count
	



# Build report
$MECMTeamReport = @()


# Check for alerts 
if ( $AppOwnerAlerts.Count -eq 0 )
	{
	$Message = "ZERO alerts for VMware Team Daily report for ($date)"
	$MECMTeamReport += "ZERO alerts for VMware Team Daily report for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $AppOwnerAlerts.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show VMware alerts by Time Raised,NetBiosComputerName,Message
	#
	$MECMTeamReport += $DSMessage
	$MECMTeamReport += ""
	$MECMTeamReport += "# VMware Team Daily report for $($date)"
	$MECMTeamReport += "#"
	$MECMTeamReport += "# Alerts since last run = $($AppOwnerAlerts.Count)"
	$MECMTeamReport += "#"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# Total OPEN alerts"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# VMware MECM Team alerts = $($OpenAppOwnerAlerts.Count)"
	$MECMTeamReport += ""
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# Balloon Memory stolen from VM's = $($OpenBalloonMemory.Count)"	
	$MECMTeamReport += "# Swapped VM Memory taken by host = $($OpenSwappedMemory.Count)"
	$MECMTeamReport += "# CPU Ready wait time alerts = $($OpenCPUReady.Count)"
	$MECMTeamReport += "# Storage Aborted SCSI commands failed = $($OpenStorageAborted.Count)"
	$MECMTeamReport += "# VMware Tools = $($OpenVMwareTools.Count)"
	$MECMTeamReport += "# VM Connection State = $($OpenVMConnection.Count)"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += ""
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# CLOSED alerts"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# VMware MECM Team alerts = $($ClosedAppOwnerAlerts.Count)"
	$MECMTeamReport += ""
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += "# Balloon Memory stolen from VM's = $($ClosedBalloonMemory.Count)"	
	$MECMTeamReport += "# Swapped VM Memory taken by host = $($ClosedSwappedMemory.Count)"
	$MECMTeamReport += "# CPU Ready wait time alerts = $($ClosedCPUReady.Count)"
	$MECMTeamReport += "# Storage Aborted SCSI commands failed = $($ClosedStorageAborted.Count)"
	$MECMTeamReport += "# VMware Tools = $($ClosedVMwareTools.Count)"
	$MECMTeamReport += "# VM Connection State = $($ClosedVMConnection.Count)"
	$MECMTeamReport += "#========================================================"
	$MECMTeamReport += ""
	$MECMTeamReport += ""

	$MECMTeamReport += "#==================="
	$MECMTeamReport += "# OPEN alert details"
	$MECMTeamReport += "#==================="
	$MECMTeamReport += ""
	
	if ( $OpenBalloonMemory.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware MECM Team Balloon Memory alerts for ($date)."
		$MECMTeamReport += ""
		}

	if ( $OpenBalloonMemory.Count -gt 0 )
		{
		$MECMTeamReport += "# VMware Balloon Memory stolen from VM's detail"
		$MECMTeamReport += "#============================================="
		$MECMTeamReport += $OpenBalloonMemory | select TimeRaised,Parameters -auto -wrap | out-string
		$MECMTeamReport += "#========================"
		$MECMTeamReport += ""
		}


 	if ( $OpenSwappedMemory.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware Swapped memory stolen from VM alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $OpenSwappedMemory.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# VMware Swapped memory stolen from VM detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $OpenSwappedMemory | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}


	if ( $OpenCPUReady.count -eq 0 )
		{
		$MECMTeamReport += "ZERO Open MECM CPU Ready Alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $OpenCPUReady.count -gt 0 )
		{
		$MECMTeamReport += "# VMware MECM CPU Ready detail"
		$MECMTeamReport += "#============================================="
		$MECMTeamReport += $OpenCPUReady | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#========================"
		$MECMTeamReport += ""
		}


 	if ( $OpenStorageAborted.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware Storage Aborted alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $OpenStorageAborted.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# VMware  Storage Aborted details"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $OpenStorageAborted | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}

		
 	if ( $OpenRemainingAlerts.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO VMware Remaining alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $OpenRemainingAlerts.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# VMware Remaining alert detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $OpenRemainingAlerts | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}
	$MECMTeamReport += ""

	$MECMTeamReport += "#====================="
	$MECMTeamReport += "# CLOSED alert details"
	$MECMTeamReport += "#====================="
	$MECMTeamReport += ""

	if ( $ClosedBalloonMemory.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed MECM Team Balloon Memory alerts for ($date)."
		$MECMTeamReport += ""
		}

	if ( $ClosedBalloonMemory.Count -gt 0 )
		{
		$MECMTeamReport += "# VMware Balloon Memory stolen from VM's detail"
		$MECMTeamReport += "#============================================="
		$MECMTeamReport += $ClosedBalloonMemory | select TimeRaised,Parameters -auto -wrap | out-string
		$MECMTeamReport += "#========================"
		$MECMTeamReport += ""
		}


	if ( $ClosedCPUReady.count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed CPU Ready Alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedCPUReady.count -gt 0 )
		{
		$MECMTeamReport += "# Closed CPU Ready detail"
		$MECMTeamReport += "#============================================="
		$MECMTeamReport += $ClosedCPUReady | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#========================"
		$MECMTeamReport += ""
		}


 	if ( $ClosedStorageAborted.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed Storage Aborted alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedStorageAborted.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# Closed Storage Aborted details"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $ClosedStorageAborted | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}


 	if ( $ClosedSwappedMemory.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed Swapped memory stolen from VM alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedSwappedMemory.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# Closed Swapped memory stolen from VM detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $ClosedSwappedMemory | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}
		
 	if ( $ClosedRemainingAlerts.Count -eq 0 )
		{
		$MECMTeamReport += "ZERO Closed Remaining alerts for ($date)."
		$MECMTeamReport += ""
		}
		
	if ( $ClosedRemainingAlerts.Count -gt 0 )
		{
		$MECMTeamReport += ""
		$MECMTeamReport += "# Closed Remaining alert detail"
		$MECMTeamReport += "#=============================="
		$MECMTeamReport += $ClosedRemainingAlerts | select TimeRaised,Parameters | out-string
		$MECMTeamReport += "#============================================================"
		$MECMTeamReport += ""
		}
	$MECMTeamReport += ""
	}
	
$MECMTeamReport
$MECMTeamReport = $MECMTeamReport | out-string


# Log
#============================================================
$Result = "GOOD"

$Summary = "$MECMTeamReport`n `nDisclaimer:  This daily summary report is to document the manual tasks used to check NiCE VMWare ESX health"

	# Proactive DailyTasks AD Team AppOwner report for date 
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)

	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	
# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.Virtualization.ESX.ADTeam.Reports.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.Virtualization.ESX.ADTeam.Reports.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware AD Team alerts
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.ESX.ADTeam.Reports.WA.v1024.ps1"
$EventID = "603"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather SCOM AD Team AppOwner Alert task for date ($date).")
$DSMessage = "Proactive DailyTasks AD Team AppOwner report task for date ($date)."


# Pre-req if NiCE Vmware packs installed

	# AppOwner alerts
	$AppOwnerAlerts = get-scomalert -name "Vmware*" | ? { ( $_.MonitoringObjectDisplayName -like "*TOBYW4NHAAH0*" ) `
	-OR ( $_.MonitoringObjectDisplayName -like "TOBYW0MLAAA5*" ) `
	-OR ( $_.MonitoringObjectDisplayName -like "TOBYW0MLAAC9*" ) `
	} | ? { ( $_.TimeRaised -gt $Time ) }
	$AppOwnerAlerts.Count

	$OpenAppOwnerAlerts = $AppOwnerAlerts | ? { $_.ResolutionState -ne 255 }
	$ClosedAppOwnerAlerts = $AppOwnerAlerts | ? { $_.ResolutionState -eq 255 }
	
	# Debug
	$OpenAppOwnerAlerts.Count
	$ClosedAppOwnerAlerts.Count
	
	# Break out categories
	# Cluster effective memory pressure VMware: Cluster Effective Memory Pressure is high
	$ClusterMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Cluster Effective Memory Pressure is high" }
	$ClusterMemory.Count

	$OpenClusterMemory = $ClusterMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedClusterMemory = $ClusterMemory | ? { $_.ResolutionState -eq 255 }
	$OpenClusterMemory.Count
	$ClosedClusterMemory.Count

	# CPU Ready Time*    VMware: VirtualMachine Virtual CPU Ready Time (%) is high
	$CPUReady = $AppOwnerAlerts | ? { $_.Name -like "*CPU Ready Time*" }
	$CPUReady.Count

	$OpenCPUReady = $CPUReady | ? { $_.ResolutionState -ne 255 }
	$ClosedCPUReady = $CPUReady | ? { $_.ResolutionState -eq 255 }
	$OpenCPUReady.Count
	$ClosedCPUReady.Count
	
	# Balloon Memory      VMware: Virtual Machine Balloon Memory is High
	$BalloonMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Virtual Machine Balloon Memory is High" }
	$BalloonMemory.Count

	$OpenBalloonMemory = $BalloonMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedBalloonMemory = $BalloonMemory | ? { $_.ResolutionState -eq 255 }
	$OpenBalloonMemory.Count
	$ClosedBalloonMemory.Count
	
	# Swapped Memory    VMware: Virtual Machine Swapped Memory is High
	$SwappedMemory = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Virtual Machine Swapped Memory is High" }
	$SwappedMemory.Count

	$OpenSwappedMemory = $SwappedMemory | ? { $_.ResolutionState -ne 255 }
	$ClosedSwappedMemory = $SwappedMemory | ? { $_.ResolutionState -eq 255 }
	$OpenSwappedMemory.Count
	$ClosedSwappedMemory.Count

	# Storage aborted     VMware: Host Storage Aborted Commands is High
	$StorageAborted = $AppOwnerAlerts | ? { $_.Name -eq "VMware: Host Storage Aborted Commands is High" }
	$StorageAborted.Count
	
	$OpenStorageAborted = $StorageAborted | ? { $_.ResolutionState -ne 255 }
	$ClosedStorageAborted = $StorageAborted | ? { $_.ResolutionState -eq 255 }
	$OpenStorageAborted.Count
	$ClosedStorageAborted.Count
	
	# VMware Tools
	$VMwareTools = $AppOwnerAlerts | ? { $_.Name -like "VMware: Virtual Machine VMware Tools*" }
	$VMwareTools.Count
	
	$OpenVMwareTools = $VMwareTools | ? { $_.ResolutionState -ne 255 }
	$ClosedVMwareTools = $VMwareTools | ? { $_.ResolutionState -eq 255 }
	$OpenVMwareTools.Count
	$ClosedVMwareTools.Count

	# Remaining alerts
	$RemainingAlerts = $AppOwnerAlerts | ? { ( $_.Name -notlike "*CPU Ready Time*" ) `
		-AND ( $_.Name -ne "VMware: Host Storage Aborted Commands is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Balloon Memory is High" ) `
		-AND ( $_.Name -ne "VMware: Virtual Machine Swapped Memory is High" ) `
		-AND ( $_.Name -notlike "VMware: Virtual Machine VMware Tools*" ) `
		}
	$RemainingAlerts.Count

	$OpenRemainingAlerts = $RemainingAlerts | ? { $_.ResolutionState -ne 255 }
	$ClosedRemainingAlerts = $RemainingAlerts | ? { $_.ResolutionState -eq 255 }
	$OpenRemainingAlerts.Count
	$ClosedRemainingAlerts.Count

	

# Build report
$ADTeamReport = @()


# Check for alerts 
if ( $AppOwnerAlerts.Count -eq 0 )
	{
	$Message = "ZERO alerts for VMware AD Team Daily report for ($date)"
	$ADTeamReport += "ZERO alerts for VMware AD Team Daily report for ($date)"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Message")
	}
	
if ( $AppOwnerAlerts.Count -gt 0 )
	{
	#
	# Create table output	

	#
	# Show VMware alerts by Time Raised,NetBiosComputerName,Message
	#
	$ADTeamReport += $DSMessage
	$ADTeamReport += ""
	$ADTeamReport += "# VMware AD Team Daily report for $($date)"
	$ADTeamReport += "#"
	$ADTeamReport += "# Alerts since last run = $($AppOwnerAlerts.Count)"
	$ADTeamReport += "#"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# Total OPEN alerts"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# VMware AD Team alerts = $($OpenAppOwnerAlerts.Count)"
	$ADTeamReport += ""
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# Balloon Memory stolen from VM's = $($OpenBalloonMemory.Count)"	
	$ADTeamReport += "# Swapped VM Memory taken by host = $($OpenSwappedMemory.Count)"
	$ADTeamReport += "# CPU Ready wait time alerts = $($OpenCPUReady.Count)"
	$ADTeamReport += "# Storage Aborted SCSI commands failed = $($OpenStorageAborted.Count)"
	$ADTeamReport += "# VMware Tools = $($OpenVMwareTools.Count)"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += ""
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# CLOSED alerts"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# VMware AD Team alerts = $($ClosedAppOwnerAlerts.Count)"
	$ADTeamReport += ""
	$ADTeamReport += "#========================================================"
	$ADTeamReport += "# Balloon Memory stolen from VM's = $($ClosedBalloonMemory.Count)"	
	$ADTeamReport += "# Swapped VM Memory taken by host = $($ClosedSwappedMemory.Count)"
	$ADTeamReport += "# CPU Ready wait time alerts = $($ClosedCPUReady.Count)"
	$ADTeamReport += "# Storage Aborted SCSI commands failed = $($ClosedStorageAborted.Count)"
	$ADTeamReport += "# VMware Tools = $($ClosedVMwareTools.Count)"
	$ADTeamReport += "#========================================================"
	$ADTeamReport += ""
	$ADTeamReport += ""

	$ADTeamReport += "#==================="
	$ADTeamReport += "# OPEN alert details"
	$ADTeamReport += "#==================="
	$ADTeamReport += ""
	
	if ( $OpenBalloonMemory.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware AD Team Balloon Memory alerts for ($date)."
		$ADTeamReport += ""
		}

	if ( $OpenBalloonMemory.Count -gt 0 )
		{
		$ADTeamReport += "# VMware Balloon Memory stolen from VM's detail"
		$ADTeamReport += "#============================================="
		$ADTeamReport += $OpenBalloonMemory | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#========================"
		$ADTeamReport += ""
		}


 	if ( $OpenSwappedMemory.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Swapped memory stolen from VM alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenSwappedMemory.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware Swapped memory stolen from VM detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $OpenSwappedMemory | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


	if ( $OpenCPUReady.count -eq 0 )
		{
		$ADTeamReport += "ZERO Open AD CPU Ready Alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenCPUReady.count -gt 0 )
		{
		$ADTeamReport += "# VMware AD CPU Ready detail"
		$ADTeamReport += "#============================================="
		$ADTeamReport += $OpenCPUReady | ft TimeRaised,Parameters -auto -wrap | out-string
		$ADTeamReport += "#========================"
		$ADTeamReport += ""
		}


 	if ( $OpenStorageAborted.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Storage Aborted alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenStorageAborted.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware Storage Aborted details"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $OpenStorageAborted | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


 	if ( $OpenVMwareTools.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Tools alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenVMwareTools.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware tools alert detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $OpenVMwareTools | select TimeRaised,MonitoringObjectDisplayName,Name | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}
		
		
 	if ( $OpenRemainingAlerts.Count -eq 0 )
		{
		$ADTeamReport += "ZERO VMware Remaining alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $OpenRemainingAlerts.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# VMware Remaining alert detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $OpenRemainingAlerts | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}
	$ADTeamReport += ""

	$ADTeamReport += "#====================="
	$ADTeamReport += "# CLOSED alert details"
	$ADTeamReport += "#====================="
	$ADTeamReport += ""

	if ( $ClosedBalloonMemory.Count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed MECM Team Balloon Memory alerts for ($date)."
		$ADTeamReport += ""
		}

	if ( $ClosedBalloonMemory.Count -gt 0 )
		{
		$ADTeamReport += "# VMware Balloon Memory stolen from VM's detail"
		$ADTeamReport += "#============================================="
		$ADTeamReport += $ClosedBalloonMemory | select TimeRaised,Parameters -auto -wrap | out-string
		$ADTeamReport += "#========================"
		$ADTeamReport += ""
		}


	if ( $ClosedCPUReady.count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed CPU Ready Alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedCPUReady.count -gt 0 )
		{
		$ADTeamReport += "# Closed CPU Ready detail"
		$ADTeamReport += "#============================================="
		$ADTeamReport += $ClosedCPUReady | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#========================"
		$ADTeamReport += ""
		}


 	if ( $ClosedStorageAborted.Count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed Storage Aborted alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedStorageAborted.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# Closed Storage Aborted details"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $ClosedStorageAborted | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}


 	if ( $ClosedSwappedMemory.Count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed Swapped memory stolen from VM alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedSwappedMemory.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# Closed Swapped memory stolen from VM detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $ClosedSwappedMemory | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}
		
 	if ( $ClosedRemainingAlerts.Count -eq 0 )
		{
		$ADTeamReport += "ZERO Closed Remaining alerts for ($date)."
		$ADTeamReport += ""
		}
		
	if ( $ClosedRemainingAlerts.Count -gt 0 )
		{
		$ADTeamReport += ""
		$ADTeamReport += "# Closed Remaining alert detail"
		$ADTeamReport += "#=============================="
		$ADTeamReport += $ClosedRemainingAlerts | select TimeRaised,Parameters | out-string
		$ADTeamReport += "#============================================================"
		$ADTeamReport += ""
		}
	$ADTeamReport += ""
	}
$ADTeamReport
$ADTeamReport = $ADTeamReport | out-string

# Log
#============================================================
$Result = "GOOD"

$Summary = "$ADTeamReport`n `nDisclaimer:  This daily summary report is to document the manual tasks used to check NiCE VMWare ESX health"

	# Proactive DailyTasks AD Team AppOwner report for date 
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)

	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	
# Return all bags
$bag



# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
      <WriteActionModuleType ID="Proactive.Virtualization.AlertClosure.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Proactive.Virtualization.AlertClosure.WA.v1024.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script report to gather NICE VMware monitors and close (after daily report has run)
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.  
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Proactive.Virtualization.AlertClosure.WA.v1024.ps1"
$EventID = "601"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================
#Set the condition = bad.  This represents your script finding something wrong
$strCondition = "Bad"

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Gather Proactive Virtualization Alert to cleanup for date ($date).")

$DSMessage = "Proactive DailyTasks Virtualization Alert Closure cleanup for date ($date)."


# Reset Monitors
# From Andrew Bradley - 
# Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
$SCOMCoreMP = Get-SCOMManagementPack -DisplayName "NiCE VMware *"
$SCOMCoreRules = $SCOMCoreMP.GetRules()
$SCOMCoreMonitors = $SCOMCoreMP.GetMonitors()
$SCOMCoreReportAlerts = Get-SCOMAlert | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }

$SCOMCoreRuleAlerts = Get-SCOMAlert | ? { ( $_.Name -in $SCOMCoreRules.DisplayName) }
$SCOMCoreRuleAlerts.Count
$SCOMCoreMonitorAlerts = Get-SCOMAlert | ? { ($_.Name -in $SCOMCoreMonitors.DisplayName ) }
$SCOMCoreMonitorAlerts.Count



# Reset Monitors logic

if ( $SCOMCoreMonitorAlerts.Count -gt 0 )
	{
	$Monitors = @( Get-SCOMMonitor -DisplayName $SCOMCoreMonitorAlerts )
 	
	foreach ($Monitor in $Monitors)
		{
		$MonitorClass = Get-SCOMClass -Id $Monitor.Target.Id
		$ActiveMonitors = Get-SCOMClassInstance -Class $MonitorClass | ? { ( $_.healthstate -ne "Success" ) -AND ( $_.healthstate -ne "Uninitialized" ) -AND ($_.IsAvailable -eq $true ) }
		write-host "Found $ActiveMonitors.Count active monitors." 
		if ( $ActiveMonitors -ne $null)
			{
			foreach ($ActiveMonitor in $ActiveMonitors)
				{
				write-host "Resetting Health State on $ActiveMonitor.FullName $ActiveMonitor.ResetMonitoringState($Monitor.ID) "
				}
			}
		}
	}



#
# (Rules) Alerts to auto close after reset monitor
#	$DNSAlertsToClose | Resolve-SCOMAlert
$SCOMCoreRuleAlerts | Resolve-SCOMAlert



# Log 
$Summary = "NiCE VMware alerts closed for date ($date)`n `n $DSMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used to check NiCE VMWare ESX health"

	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)

	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	
# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.Virtualization.ESX.Admin.Reports.Datasource">
            <TimeoutSeconds>600</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.Virtualization.ESX.Admin.Reports.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.Virtualization.ESX.NonWindows.Report.Datasource">
            <TimeoutSeconds>600</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.Virtualization.ESX.NonWindows.Reports.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.Virtualization.ESX.MECM.Report.Datasource">
            <TimeoutSeconds>600</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.Virtualization.ESX.MECM.Reports.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.Virtualization.ESX.ADTeam.Report.Datasource">
            <TimeoutSeconds>600</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.Virtualization.ESX.ADTeam.Reports.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Proactive.Virtualization.AlertClosure.Datasource">
            <TimeoutSeconds>3300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Proactive.Virtualization.AlertClosure.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>

      <Rule ID="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">599</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks Virtualization Team alerts for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Task.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">599</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks Non-Windows alerts task for date</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Task.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">602</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks MECM Team AppOwner report task for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Task.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">603</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks AD Team AppOwner report task for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">601</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks Virtualization Alert Closure cleanup for date </Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Task.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>
    </Rules>
    <Tasks>
      <Task ID="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.Virtualization.ESX.Admin.Reports.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.Virtualization.ESX.NonWindows.Reports.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>	  
      <Task ID="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.Virtualization.AlertClosure.WA">
          <TimeoutSeconds>3000</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.Virtualization.ESX.MECM.Reports.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Proactive.Virtualization.ESX.ADTeam.Reports.WA">
          <TimeoutSeconds>600</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Proactive.Virtualization.ESX.Admin.Reports.AlertMessage" />
      <StringResource ID="Proactive.Virtualization.ESX.NonWindows.Reports.AlertMessage" />
      <StringResource ID="Proactive.Virtualization.ESX.MECM.Reports.AlertMessage" />
      <StringResource ID="Proactive.Virtualization.ESX.ADTeam.Reports.AlertMessage" />
      <StringResource ID="Proactive.Virtualization.AlertClosure.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Task.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Task.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Task.Rule.AlertMessage" />
	  <StringResource ID="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Task.Rule.AlertMessage" />
	</StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Proactive.Virtualization.Reports">
          <Name>Proactive Microsoft Virtualization Reports</Name>
          <Description>
v1.0.2.4  18 Jul 2023 - Changed report times from EST to GMT
v1.0.2.3  18 Jul 2023 - Updated reports to informational
v1.0.1.8   1 Jul 2022 - Updated regex, disabled rules, non-windows report
v1.0.1.6  14 Mar 2022 - Added new states
v1.0.1.2  31 Jan 2022 - Added new state report
v1.0.1.1  12 Jan 2022 - Updated DS WA for new report order, removed some detail sections from AppOwner reports
v1.0.0.8  13 Dec 2021 - Updated alerts,reports and datapoints per VMware team, AD and MECM teams, vmware tool alerts
v1.0.0.0  30 Nov 2021 - Created and added NiCE VMware/ESX Virtualization logic</Description>
        </DisplayString>

		<DisplayString ElementID="Proactive.Virtualization.ESX.Admin.Reports.Datasource">
          <Name>Proactive DailyTasks Virtualization Team daily ESX Admin alert report DataSource</Name>
          <Description>This datasource generates Virtualization Team daily alert report PowerShell script DataSource</Description>
        </DisplayString>
		<DisplayString ElementID="Proactive.Virtualization.ESX.NonWindows.Report.Datasource">
          <Name>Proactive DailyTasks Virtualization Non-Windows alert report DataSource</Name>
          <Description>This datasource generates Virtualization Non-Windows alert report PowerShell script DataSource</Description>
        </DisplayString>
		<DisplayString ElementID="Proactive.Virtualization.ESX.MECM.Report.Datasource">
          <Name>Proactive DailyTasks Virtualization Team daily ESX MECM alert report DataSource</Name>
          <Description>This datasource generates Virtualization Team MECM daily alert report PowerShell script DataSource</Description>
        </DisplayString>
		<DisplayString ElementID="Proactive.Virtualization.ESX.ADTeam.Report.Datasource">
          <Name>Proactive DailyTasks Virtualization Team daily ESX ADTeam alert report DataSource</Name>
          <Description>This datasource generates Virtualization Team ADTeam daily alert report PowerShell script DataSource</Description>
        </DisplayString>
		<DisplayString ElementID="Proactive.Virtualization.AlertClosure.Datasource">
          <Name>Proactive DailyTasks Virtualization Team daily Alert Closure DataSource</Name>
          <Description>This datasource generates Virtualization Team daily network report PowerShell script DataSource</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.Virtualization.ESX.Admin.Reports.WA">	
          <Name>Proactive DailyTasks Virtualization Team daily ESX Admin alert report on-demand task</Name>
          <Description>This write-action task generates Virtualization Team daily report PowerShell script (WA) write action</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Virtualization.ESX.NonWindows.Reports.WA">	
          <Name>Proactive DailyTasks Virtualization Non-Windows alert report on-demand task</Name>
          <Description>This write-action task generates Virtualization Non-Windows daily report PowerShell script (WA) write action</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Virtualization.ESX.MECM.Reports.WA">	
          <Name>Proactive DailyTasks Virtualization Team daily ESX MECM alert report on-demand task</Name>
          <Description>This write-action task generates Virtualization MECM Team daily report PowerShell script (WA) write action</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Virtualization.ESX.ADTeam.Reports.WA">	
          <Name>Proactive DailyTasks Virtualization Team daily ESX ADTeam alert report on-demand task</Name>
          <Description>This write-action task generates Virtualization ADTeam daily report PowerShell script (WA) write action</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Virtualization.AlertClosure.WA">	
          <Name>Proactive DailyTasks Virtualization Team daily network report on-demand task</Name>
          <Description>This write-action task cleans up NiCE VMware ESX alerts via PowerShell script (WA) write action</Description>
        </DisplayString>
		
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Team ESX Admin daily Report Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off datasource at 0606 UTC M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Non-Windows daily Report Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off datasource at 0606 UTC M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Team ESX Admin daily Report Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off datasource at 0606 UTC M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Team ESX ADTeam daily Report Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off datasource at 0613 UTC M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Alert Closure cleanup Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off datasource at 0609 UTC M-F</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Task">
          <Name>Proactive DailyTasks Virtualization Team ESX Admin daily Report Script Task</Name>
          <Description>Proactive DailyTasks Virtualization Team ESX Admin daily Report Script to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Task">
          <Name>Proactive DailyTasks Virtualization Non-Windows daily Report Script Task</Name>
          <Description>Proactive DailyTasks Virtualization Non-Windows daily Report Script to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Task">
          <Name>Proactive DailyTasks Virtualization Team ESX MECM daily Report Script Task</Name>
          <Description>Proactive DailyTasks Virtualization Team ESX MECM daily Report Script to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Task">
          <Name>Proactive DailyTasks Virtualization Team ESX AD Team daily Report Script Task</Name>
          <Description>Proactive DailyTasks Virtualization Team ESX AD Team daily Report Script to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Task">
          <Name>Proactive DailyTasks Virtualization Alert Closure cleanup Script Task</Name>
          <Description>Proactive DailyTasks Virtualization Alert Closure cleanup Script to kick off on-demand</Description>
        </DisplayString>
		
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Team ESX Admin daily Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Non-Windows daily Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Team ESX MECM daily Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Team ESX AD Team daily Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks Virtualization Alert Closure Script Manual Task Rule</Name>
        </DisplayString>

        <DisplayString ElementID="Proactive.Virtualization.ESX.Admin.Reports.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Team ESX Admin daily Report Script Alert Rule</Name>
          <Description>{1}

{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Virtualization.ESX.NonWindows.Reports.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Non-Windows daily Report Script Alert Rule</Name>
          <Description>{1}

{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Virtualization.ESX.MECM.Reports.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Team ESX MECM daily Report Script Alert Rule</Name>
          <Description>{1}

{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Virtualization.ESX.ADTeam.Reports.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Team ESX AD Team daily Report Script Alert Rule</Name>
          <Description>{1}

{2}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.Virtualization.AlertClosure.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Alert Closure cleanup Script Alert Rule</Name>
          <Description>{1}

{2}</Description>
        </DisplayString>

        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.Admin.Report.Script.Task.Rule.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Team ESX Admin daily Report Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.NonWindows.Report.Script.Task.Rule.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Non-Windows daily Report Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.MECM.Report.Script.Task.Rule.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Team ESX MECM daily Report Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.ESX.ADTeam.Report.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Team ESX AD Team daily Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Proactive.DailyTasks.Virtualization.AlertClosure.Script.Task.Rule.AlertMessage">
          <Name>Proactive DailyTasks Virtualization Alert Closure cleanup Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
	  </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>